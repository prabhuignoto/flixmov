[{"D:\\Projects\\2020\\flixmov\\ui\\src\\index.tsx":"1","D:\\Projects\\2020\\flixmov\\ui\\src\\serviceWorker.js":"2","D:\\Projects\\2020\\flixmov\\ui\\src\\App.tsx":"3","D:\\Projects\\2020\\flixmov\\ui\\src\\pages\\Movies.tsx":"4","D:\\Projects\\2020\\flixmov\\ui\\src\\pages\\Tv.tsx":"5","D:\\Projects\\2020\\flixmov\\ui\\src\\pages\\SearchHome.tsx":"6","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\header\\header.tsx":"7","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-message\\media-message.tsx":"8","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\header\\header.styles.ts":"9","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-message\\media-message.style.ts":"10","D:\\Projects\\2020\\flixmov\\ui\\src\\effects\\useResponsive.ts":"11","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-search-box\\media-searchbox.tsx":"12","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-toggle\\media-toggle.tsx":"13","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\logo\\logo.tsx":"14","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\icons\\index.ts":"15","D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\models\\index.ts":"16","D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\tv\\index.tsx":"17","D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\movies\\index.tsx":"18","D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\search\\index.tsx":"19","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-toggle\\media-toggle.styles.ts":"20","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-search-box\\media-searchbox.styles.ts":"21","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\logo\\logo.styles.ts":"22","D:\\Projects\\2020\\flixmov\\ui\\src\\gqls\\movies.ts":"23","D:\\Projects\\2020\\flixmov\\ui\\src\\gqls\\tv.ts":"24","D:\\Projects\\2020\\flixmov\\ui\\src\\models\\Slider.ts":"25","D:\\Projects\\2020\\flixmov\\ui\\src\\models\\MediaObject.ts":"26","D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\details\\tvDetails.tsx":"27","D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\details\\movieDetails.tsx":"28","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-objects\\media-objects.tsx":"29","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-slider\\index.tsx":"30","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-objects\\media-objects.styles.ts":"31","D:\\Projects\\2020\\flixmov\\ui\\src\\gqls\\movieDetails.ts":"32","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-objects\\media-grid.tsx":"33","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-objects\\media-list.tsx":"34","D:\\Projects\\2020\\flixmov\\ui\\src\\gqls\\tvDetails.ts":"35","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-modal\\media-modal.tsx":"36","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-card\\card.tsx":"37","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\HOCS\\withExtendInfo.tsx":"38","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\details-main.tsx":"39","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-slider\\index.styles.ts":"40","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-slider\\collection.tsx":"41","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\commons\\styles.tsx":"42","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\HOCS\\withExtendInfo.styles.ts":"43","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-loader\\index.tsx":"44","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-modal\\media-modal.styles.ts":"45","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-objects\\media-object.tsx":"46","D:\\Projects\\2020\\flixmov\\ui\\src\\models\\CardSize.ts":"47","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-card\\card-extended.tsx":"48","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\details-main.styles.ts":"49","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-card\\card.style.tsx":"50","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-objects\\media-grid.style.ts":"51","D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\details\\reviews.tsx":"52","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-poster\\poster.tsx":"53","D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\details\\images.tsx":"54","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\panel\\panel.tsx":"55","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\home\\details-home.tsx":"56","D:\\Projects\\2020\\flixmov\\ui\\src\\effects\\useVirtual.ts":"57","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-slider\\movies.tsx":"58","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-objects\\media-object.style.ts":"59","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-card\\card-extended.styles.ts":"60","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-slider\\collection.style.tsx":"61","D:\\Projects\\2020\\flixmov\\ui\\src\\gqls\\reviews.ts":"62","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-poster\\poster-styles.ts":"63","D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\related\\index.tsx":"64","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-rating\\media-rating.tsx":"65","D:\\Projects\\2020\\flixmov\\ui\\src\\gqls\\images.ts":"66","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\panel\\panel.style.ts":"67","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\home\\details-home.styles.ts":"68","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\reviews\\details-reviews.tsx":"69","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\details-cast-and-crew.tsx":"70","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\title\\details-title.tsx":"71","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\production\\details-production.tsx":"72","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-slider\\movies.style.ts":"73","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-rating\\media-rating.style.ts":"74","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\reviews\\details-reviews.style.ts":"75","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-related\\media-related.tsx":"76","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\details-cast-and-crew.styles.ts":"77","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\reviews\\details-review.tsx":"78","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\title\\details-title.style.ts":"79","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\production\\details-production.styles..ts":"80","D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\details\\castDetails.tsx":"81","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-genres\\genres.tsx":"82","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\attribute\\details-attribute.tsx":"83","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\media-imdb-link\\media-imdb-link.tsx":"84","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-related\\media-related.styles.ts":"85","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\reviews\\details-review.style.ts":"86","D:\\Projects\\2020\\flixmov\\ui\\src\\gqls\\cast.ts":"87","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-genres\\genres-styles.ts":"88","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\media-imdb-link\\media-imdb-link.styles.ts":"89","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\attribute\\details-attribute.style.ts":"90"},{"size":458,"mtime":1590134358503,"results":"91","hashOfConfig":"92"},{"size":5086,"mtime":1586587080751,"results":"93","hashOfConfig":"92"},{"size":3319,"mtime":1600051639911,"results":"94","hashOfConfig":"92"},{"size":579,"mtime":1591856212519,"results":"95","hashOfConfig":"92"},{"size":478,"mtime":1591255714414,"results":"96","hashOfConfig":"92"},{"size":3372,"mtime":1602217086048,"results":"97","hashOfConfig":"92"},{"size":2087,"mtime":1591880525648,"results":"98","hashOfConfig":"92"},{"size":601,"mtime":1591880676658,"results":"99","hashOfConfig":"92"},{"size":850,"mtime":1602216227690,"results":"100","hashOfConfig":"92"},{"size":739,"mtime":1602216900163,"results":"101","hashOfConfig":"92"},{"size":621,"mtime":1591880780231,"results":"102","hashOfConfig":"92"},{"size":1512,"mtime":1591880722350,"results":"103","hashOfConfig":"92"},{"size":3132,"mtime":1591880768704,"results":"104","hashOfConfig":"92"},{"size":1861,"mtime":1591880550206,"results":"105","hashOfConfig":"92"},{"size":4824,"mtime":1604557748590,"results":"106","hashOfConfig":"92"},{"size":456,"mtime":1591880505982,"results":"107","hashOfConfig":"92"},{"size":3347,"mtime":1591880404983,"results":"108","hashOfConfig":"92"},{"size":3364,"mtime":1591880394161,"results":"109","hashOfConfig":"92"},{"size":4568,"mtime":1602217077428,"results":"110","hashOfConfig":"92"},{"size":1438,"mtime":1602216648130,"results":"111","hashOfConfig":"92"},{"size":1011,"mtime":1602216936817,"results":"112","hashOfConfig":"92"},{"size":723,"mtime":1602216527194,"results":"113","hashOfConfig":"92"},{"size":2626,"mtime":1591263028721,"results":"114","hashOfConfig":"92"},{"size":2150,"mtime":1591112961367,"results":"115","hashOfConfig":"92"},{"size":460,"mtime":1591113723483,"results":"116","hashOfConfig":"92"},{"size":456,"mtime":1591292615723,"results":"117","hashOfConfig":"92"},{"size":3545,"mtime":1602217069349,"results":"118","hashOfConfig":"92"},{"size":3573,"mtime":1602217058696,"results":"119","hashOfConfig":"92"},{"size":6721,"mtime":1604557857723,"results":"120","hashOfConfig":"92"},{"size":5060,"mtime":1591878376281,"results":"121","hashOfConfig":"92"},{"size":2857,"mtime":1602216647625,"results":"122","hashOfConfig":"92"},{"size":562,"mtime":1588421287139,"results":"123","hashOfConfig":"92"},{"size":2677,"mtime":1598425220546,"results":"124","hashOfConfig":"92"},{"size":3557,"mtime":1598609741763,"results":"125","hashOfConfig":"92"},{"size":642,"mtime":1591017050195,"results":"126","hashOfConfig":"92"},{"size":2152,"mtime":1591880681217,"results":"127","hashOfConfig":"92"},{"size":2288,"mtime":1604557826769,"results":"128","hashOfConfig":"92"},{"size":5113,"mtime":1602216496355,"results":"129","hashOfConfig":"92"},{"size":4831,"mtime":1591880663641,"results":"130","hashOfConfig":"92"},{"size":2666,"mtime":1602217015435,"results":"131","hashOfConfig":"92"},{"size":7629,"mtime":1591880726845,"results":"132","hashOfConfig":"92"},{"size":835,"mtime":1602215923483,"results":"133","hashOfConfig":"92"},{"size":642,"mtime":1602216271234,"results":"134","hashOfConfig":"92"},{"size":1417,"mtime":1602216887243,"results":"135","hashOfConfig":"92"},{"size":2002,"mtime":1602216650424,"results":"136","hashOfConfig":"92"},{"size":3472,"mtime":1593175421924,"results":"137","hashOfConfig":"92"},{"size":63,"mtime":1591789681947,"results":"138","hashOfConfig":"92"},{"size":3676,"mtime":1591880560159,"results":"139","hashOfConfig":"92"},{"size":2694,"mtime":1602216823567,"results":"140","hashOfConfig":"92"},{"size":2567,"mtime":1606326481211,"results":"141","hashOfConfig":"92"},{"size":338,"mtime":1602216906709,"results":"142","hashOfConfig":"92"},{"size":1562,"mtime":1591880385468,"results":"143","hashOfConfig":"92"},{"size":1297,"mtime":1591880707681,"results":"144","hashOfConfig":"92"},{"size":2666,"mtime":1602217046322,"results":"145","hashOfConfig":"92"},{"size":1509,"mtime":1591880599357,"results":"146","hashOfConfig":"92"},{"size":2525,"mtime":1591880584745,"results":"147","hashOfConfig":"92"},{"size":1354,"mtime":1591880782330,"results":"148","hashOfConfig":"92"},{"size":2471,"mtime":1591880749333,"results":"149","hashOfConfig":"92"},{"size":2264,"mtime":1602216171259,"results":"150","hashOfConfig":"92"},{"size":2727,"mtime":1602216646572,"results":"151","hashOfConfig":"92"},{"size":1456,"mtime":1602216994324,"results":"152","hashOfConfig":"92"},{"size":296,"mtime":1588566653363,"results":"153","hashOfConfig":"92"},{"size":1857,"mtime":1602216916337,"results":"154","hashOfConfig":"92"},{"size":3420,"mtime":1591880398945,"results":"155","hashOfConfig":"92"},{"size":1268,"mtime":1591880713223,"results":"156","hashOfConfig":"92"},{"size":506,"mtime":1591021060054,"results":"157","hashOfConfig":"92"},{"size":817,"mtime":1602216889930,"results":"158","hashOfConfig":"92"},{"size":1885,"mtime":1602216650424,"results":"159","hashOfConfig":"92"},{"size":1240,"mtime":1590296719886,"results":"160","hashOfConfig":"92"},{"size":766,"mtime":1591880629988,"results":"161","hashOfConfig":"92"},{"size":2977,"mtime":1591880624971,"results":"162","hashOfConfig":"92"},{"size":1210,"mtime":1591880606105,"results":"163","hashOfConfig":"92"},{"size":1635,"mtime":1602217031104,"results":"164","hashOfConfig":"92"},{"size":518,"mtime":1602216923874,"results":"165","hashOfConfig":"92"},{"size":662,"mtime":1602216650424,"results":"166","hashOfConfig":"92"},{"size":1011,"mtime":1591880718280,"results":"167","hashOfConfig":"92"},{"size":414,"mtime":1602216852551,"results":"168","hashOfConfig":"92"},{"size":1617,"mtime":1590593021346,"results":"169","hashOfConfig":"92"},{"size":2669,"mtime":1602216650424,"results":"170","hashOfConfig":"92"},{"size":149,"mtime":1602216857566,"results":"171","hashOfConfig":"92"},{"size":4179,"mtime":1602217039376,"results":"172","hashOfConfig":"92"},{"size":650,"mtime":1591880669080,"results":"173","hashOfConfig":"92"},{"size":678,"mtime":1591880576122,"results":"174","hashOfConfig":"92"},{"size":450,"mtime":1591880594544,"results":"175","hashOfConfig":"92"},{"size":344,"mtime":1602216930636,"results":"176","hashOfConfig":"92"},{"size":1885,"mtime":1602216650425,"results":"177","hashOfConfig":"92"},{"size":802,"mtime":1591289732014,"results":"178","hashOfConfig":"92"},{"size":843,"mtime":1602216879719,"results":"179","hashOfConfig":"92"},{"size":716,"mtime":1602216833445,"results":"180","hashOfConfig":"92"},{"size":1300,"mtime":1602216650424,"results":"181","hashOfConfig":"92"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},"1jbnzcv",{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"184"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"184"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"184"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"184"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"184"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"184"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"184"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"184"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"184"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"184"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"184"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"184"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"184"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"184"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"184"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"184"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"184"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"184"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"184"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"184"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"184"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"184"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"184"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"184"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"184"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"184"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"388"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},"D:\\Projects\\2020\\flixmov\\ui\\src\\index.tsx",[],["391","392"],"D:\\Projects\\2020\\flixmov\\ui\\src\\serviceWorker.js",[],["393","394"],"D:\\Projects\\2020\\flixmov\\ui\\src\\App.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\pages\\Movies.tsx",["395"],"import React from \"react\";\r\n\r\nimport Movies from \"../containers/movies\";\r\nimport { Category } from \"../containers/models\";\r\n\r\nexport default () => {\r\n  const [show, setShow] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    setTimeout(() => setShow(true), 750);\r\n  }, []);\r\n\r\n  return show ? <>\r\n    <Movies category={Category.POPULAR} title=\"Popular\" />\r\n    <Movies category={Category.TOP_RATED} title=\"Top Rated\" />\r\n    <Movies category={Category.NOW_PLAYING} title=\"Now Playing\" />\r\n    <Movies category={Category.UP_COMING} title=\"Up Coming\" />\r\n  </> : null\r\n};\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\pages\\Tv.tsx",["396"],"import React from \"react\";\r\n\r\nimport Tv, { TvCategory } from \"../containers/tv\";\r\n\r\nexport default () => {\r\n  const [show, setShow] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    setTimeout(() => setShow(true), 750);\r\n  }, []);\r\n\r\n  return show ? (\r\n    <>\r\n      <Tv title=\"Top Rated\" category={TvCategory.TOP_RATED} />\r\n      <Tv title=\"Popular\" category={TvCategory.POPULAR} />\r\n      <Tv title=\"On Air\" category={TvCategory.ON_AIR} />\r\n    </>\r\n  ) : null;\r\n};\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\pages\\SearchHome.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\header\\header.tsx",["397","398"],"import React from 'react';\r\nimport {\r\n  HeaderWrapper,\r\n  LogoContainer,\r\n  SearchAndDiscover,\r\n  SearchSettingToggle,\r\n} from './header.styles';\r\nimport {CameraIcon, SearchIcon, TvIcon, CompassIcon} from '../icons';\r\nimport MediaToggle, {MediaToggleOption} from '../media-toggle/media-toggle';\r\nimport {useHistory, useLocation} from 'react-router-dom';\r\nimport useResponsive from '../../effects/useResponsive';\r\nimport Logo from '../logo/logo';\r\n\r\nconst Header: React.FunctionComponent = () => {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const resx = useResponsive();\r\n\r\n  const [showLinks, setShowLinks] = React.useState({\r\n    state: false,\r\n    options: [] as MediaToggleOption[],\r\n  });\r\n\r\n  const options: MediaToggleOption[] = [\r\n    {value: 'movies', label: 'movies', icon: <CameraIcon />},\r\n    {value: 'tv', label: 'television', icon: <TvIcon />},\r\n    {value: 'search', label: 'search', icon: <SearchIcon />},\r\n    // { value: \"discover\", label: \"discover\", icon: <CompassIcon /> },\r\n    // { value: \"help\", label: \"help\", icon: <HelpCircleIcon /> },\r\n  ];\r\n\r\n  React.useEffect(() => {\r\n    setShowLinks({\r\n      state: true,\r\n      options: options.map<MediaToggleOption>((opt) => {\r\n        if (location.pathname.replace(/\\//g, '') === opt.value) {\r\n          return Object.assign({}, opt, {\r\n            selected: true,\r\n          });\r\n        } else {\r\n          return opt;\r\n        }\r\n      }),\r\n    });\r\n  }, []);\r\n\r\n  const handleSelection = (val: MediaToggleOption | null) => {\r\n    if (val) {\r\n      history.push(`/${val.value}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <HeaderWrapper resx={resx}>\r\n      <LogoContainer>\r\n        <Logo></Logo>\r\n      </LogoContainer>\r\n      <SearchAndDiscover>\r\n        <SearchSettingToggle resx={resx}>\r\n          {showLinks.state && (\r\n            <MediaToggle\r\n              onSelect={handleSelection}\r\n              options={showLinks.options}\r\n            ></MediaToggle>\r\n          )}\r\n        </SearchSettingToggle>\r\n      </SearchAndDiscover>\r\n    </HeaderWrapper>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-message\\media-message.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\header\\header.styles.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-message\\media-message.style.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\effects\\useResponsive.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-search-box\\media-searchbox.tsx",["399"],"import React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport {\r\n  SearchBoxWrapper,\r\n  SearchInput,\r\n  GoButton,\r\n  SearchIconWrapper,\r\n} from './media-searchbox.styles';\r\nimport {SearchIcon, ArrowRightIcon} from '../icons';\r\n\r\nexport interface MediaSearchboxModel {\r\n  onSearch: (term: string) => void;\r\n}\r\n\r\nconst MediaSearchBox: React.FunctionComponent<MediaSearchboxModel> = ({\r\n  onSearch,\r\n}) => {\r\n  const [inputState, setInputState] = React.useState('');\r\n\r\n  const handleChange = (event: ChangeEvent) => {\r\n    const val = (event.target as HTMLInputElement).value;\r\n    setInputState(val);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (!inputState) {\r\n      onSearch && onSearch(inputState);\r\n    }\r\n  }, [inputState]);\r\n\r\n  const handleSearch = () => {\r\n    if (inputState) {\r\n      onSearch && onSearch(inputState);\r\n    }\r\n  };\r\n\r\n  const handleEnter = (event: KeyboardEvent) => {\r\n    if (event.which === 13) {\r\n      onSearch && onSearch(inputState);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SearchBoxWrapper>\r\n      <SearchIconWrapper>\r\n        <SearchIcon color=\"#bdbdbd\"></SearchIcon>\r\n      </SearchIconWrapper>\r\n      <SearchInput\r\n        value={inputState}\r\n        onChange={handleChange}\r\n        onKeyPress={handleEnter}\r\n        type=\"text\"\r\n      ></SearchInput>\r\n      {inputState && (\r\n        <GoButton onClick={handleSearch}>\r\n          <ArrowRightIcon color=\"#cc0000\"></ArrowRightIcon>\r\n        </GoButton>\r\n      )}\r\n    </SearchBoxWrapper>\r\n  );\r\n};\r\n\r\nexport default MediaSearchBox;\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-toggle\\media-toggle.tsx",["400"],"import React, {MouseEvent} from 'react';\r\nimport {\r\n  MediaToggleWrapper,\r\n  Option,\r\n  Highlighter,\r\n  OptionLabel,\r\n} from './media-toggle.styles';\r\nimport {useSpring, config} from 'react-spring';\r\nimport useResponsive from '../../effects/useResponsive';\r\n\r\nexport interface MediaToggleOption {\r\n  value: string;\r\n  label: string;\r\n  selected?: boolean;\r\n  icon?: React.ReactNode;\r\n}\r\n\r\nexport interface MediaToggleModel {\r\n  options: MediaToggleOption[];\r\n  onSelect?: (val: MediaToggleOption) => void;\r\n  onSelectionStart?: () => void;\r\n}\r\n\r\nconst MediaToggle: React.FunctionComponent<MediaToggleModel> = ({\r\n  options,\r\n  onSelect,\r\n}) => {\r\n  const [opts, setOpts] = React.useState({\r\n    highlighterOffset: 0,\r\n    items: options.some((opt) => opt.selected)\r\n      ? options\r\n      : Array.from(options, (opt, index) => {\r\n          if (index === 0) {\r\n            return Object.assign({}, opt, {\r\n              selected: true,\r\n            });\r\n          } else {\r\n            return Object.assign({}, opt, {\r\n              selected: false,\r\n            });\r\n          }\r\n        }),\r\n  });\r\n\r\n  const resx = useResponsive();\r\n\r\n  const defaultRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  const [props, setProps] = useSpring(() => ({\r\n    left: -100,\r\n    width: 0,\r\n    opacity: 0,\r\n    config: config.default,\r\n  }));\r\n\r\n  React.useEffect(() => {\r\n    requestAnimationFrame(() => {\r\n      if (defaultRef && defaultRef.current) {\r\n        const {offsetLeft, offsetWidth} = defaultRef.current;\r\n        setOpts({\r\n          items: opts.items,\r\n          highlighterOffset: offsetLeft,\r\n        });\r\n\r\n        setProps({\r\n          left: offsetLeft,\r\n          width: offsetWidth,\r\n          opacity: 1,\r\n        });\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const handleToggle = (\r\n    selectedOption: MediaToggleOption,\r\n    event: MouseEvent<HTMLDivElement>\r\n  ) => {\r\n    const newOpts = opts.items.map((opt) => {\r\n      if (opt.value === selectedOption.value) {\r\n        return Object.assign({}, opt, {\r\n          selected: true,\r\n        });\r\n      } else {\r\n        return Object.assign({}, opt, {selected: false});\r\n      }\r\n    });\r\n    setOpts({\r\n      items: newOpts,\r\n      highlighterOffset: event.currentTarget.offsetLeft,\r\n    });\r\n    setProps({\r\n      left: event.currentTarget.offsetLeft,\r\n      width: event.currentTarget.offsetWidth,\r\n      immediate: false,\r\n      onStart: () => onSelect && onSelect(selectedOption),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <MediaToggleWrapper>\r\n      <Highlighter left={opts.highlighterOffset} style={props}></Highlighter>\r\n      {opts.items.map((option) => (\r\n        <Option\r\n          onClickCapture={(ev: MouseEvent<HTMLDivElement>) =>\r\n            handleToggle(option, ev)\r\n          }\r\n          title={option.label}\r\n          selected={option.selected}\r\n          key={option.label}\r\n          ref={option.selected ? defaultRef : null}\r\n          resx={resx}\r\n        >\r\n          {option.icon}\r\n          <OptionLabel marginLess={!option.icon}>{option.label}</OptionLabel>\r\n        </Option>\r\n      ))}\r\n    </MediaToggleWrapper>\r\n  );\r\n};\r\n\r\nexport default MediaToggle;\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\logo\\logo.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\icons\\index.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\models\\index.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\tv\\index.tsx",["401"],"import * as React from 'react';\r\nimport { useApolloClient, DocumentNode } from '@apollo/client';\r\nimport Slider from '../../components/media-slider';\r\nimport { onAir, popular, topRated } from '../../gqls/tv';\r\nimport Movie from '../../models/Media';\r\nimport { LoadingState, SliderType } from '../../models/Slider';\r\nimport { nanoid } from 'nanoid';\r\nconst dedupe = require('dedupe');\r\n\r\nexport enum TvCategory {\r\n  POPULAR = 'POPULAR',\r\n  TOP_RATED = 'TOP_RATED',\r\n  ON_AIR = 'ON_AIR',\r\n}\r\n\r\nexport interface MediaTvContainer {\r\n  category: TvCategory;\r\n  title: string;\r\n}\r\n\r\nconst getQuery: (c: TvCategory) => DocumentNode = (category) => {\r\n  switch (category) {\r\n    case TvCategory.POPULAR:\r\n      return popular;\r\n    case TvCategory.TOP_RATED:\r\n      return topRated;\r\n    case TvCategory.ON_AIR:\r\n      return onAir;\r\n  }\r\n};\r\n\r\nconst Tv: React.FunctionComponent<MediaTvContainer> = ({ category, title }) => {\r\n  const client = useApolloClient();\r\n  const [movieData, setMovieData] = React.useState<{\r\n    results: Movie[];\r\n    total_results?: number;\r\n  }>({\r\n    results: [],\r\n    total_results: 0,\r\n  });\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    getTv(1);\r\n  }, []);\r\n\r\n  const getTv = async (page: number) => {\r\n    setLoading(true);\r\n    const { data } = await client.query({\r\n      query: getQuery(category),\r\n      variables: {\r\n        lang: 'en-US',\r\n        page,\r\n      },\r\n      fetchPolicy: 'cache-first',\r\n    });\r\n\r\n    if (data) {\r\n      let newData = [] as Movie[];\r\n      if (movieData.results) {\r\n        let newResults = [];\r\n        if (category === TvCategory.POPULAR) {\r\n          newResults = data.getPopularTv;\r\n        } else if (category === TvCategory.TOP_RATED) {\r\n          newResults = data.getTopRatedTv;\r\n        } else if (category === TvCategory.ON_AIR) {\r\n          newResults = data.getTvOnAir;\r\n        }\r\n        newData = [...movieData.results, ...newResults.results];\r\n        const dedupedData = dedupe(\r\n          newData,\r\n          (value: Movie) => value.id\r\n        ) as Movie[];\r\n        setMovieData({\r\n          results: dedupedData,\r\n          total_results: newResults.total_results,\r\n        });\r\n      }\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleFetchMore = (page: number) => {\r\n    getTv(page);\r\n  };\r\n\r\n  let view = null;\r\n\r\n  if (loading) {\r\n    view = (\r\n      <Slider\r\n        movies={[]}\r\n        title={title}\r\n        fetchMore={handleFetchMore}\r\n        totalResults={0}\r\n        id={nanoid()}\r\n        loadingState={LoadingState.LOADING}\r\n      ></Slider>\r\n    );\r\n  } else if (movieData.results.length) {\r\n    view = (\r\n      <Slider\r\n        movies={\r\n          movieData\r\n            ? movieData.results.map((item: any) =>\r\n                Object.assign({}, item, {\r\n                  hide: false,\r\n                  selected: false,\r\n                  title: item.name,\r\n                  release_date: item.first_air_date,\r\n                })\r\n              )\r\n            : []\r\n        }\r\n        title={title}\r\n        fetchMore={handleFetchMore}\r\n        totalResults={movieData.total_results ? movieData.total_results : 0}\r\n        loadingState={LoadingState.LOADED}\r\n        sliderType={SliderType.tv}\r\n        id={nanoid()}\r\n      ></Slider>\r\n    );\r\n  }\r\n\r\n  return view;\r\n};\r\n\r\nexport default Tv;\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\movies\\index.tsx",["402"],"import * as React from 'react';\r\nimport { useApolloClient, DocumentNode } from '@apollo/client';\r\nimport Slider from '../../components/media-slider';\r\nimport { popular, topRated, upcoming, nowPlaying } from '../../gqls/movies';\r\nimport Movie from '../../models/Media';\r\nimport { LoadingState, SliderType } from '../../models/Slider';\r\nimport { nanoid } from 'nanoid';\r\nimport { Category, MediaContainer } from '../models';\r\nconst dedupe = require('dedupe');\r\n\r\nconst getQuery: (c: Category) => DocumentNode = (category) => {\r\n  switch (category) {\r\n    case Category.POPULAR:\r\n      return popular;\r\n    case Category.TOP_RATED:\r\n      return topRated;\r\n    case Category.UP_COMING:\r\n      return upcoming;\r\n    case Category.NOW_PLAYING:\r\n      return nowPlaying;\r\n  }\r\n};\r\n\r\nconst MovieContainer: React.FunctionComponent<MediaContainer> = ({\r\n  category,\r\n  title,\r\n}) => {\r\n  const client = useApolloClient();\r\n  const [movieData, setMovieData] = React.useState<{\r\n    results: Movie[];\r\n    total_results?: number;\r\n  }>({\r\n    results: [],\r\n    total_results: 0,\r\n  });\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    getMovies(1);\r\n  }, []);\r\n\r\n  const getMovies = async (page: number) => {\r\n    setLoading(true);\r\n    const { data } = await client.query({\r\n      query: getQuery(category),\r\n      variables: {\r\n        lang: 'en-US',\r\n        page,\r\n      },\r\n      fetchPolicy: 'cache-first',\r\n    });\r\n\r\n    if (data) {\r\n      let newData = [] as Movie[];\r\n      if (movieData.results) {\r\n        let newResults = [];\r\n        if (category === Category.POPULAR) {\r\n          newResults = data.getPopular;\r\n        } else if (category === Category.TOP_RATED) {\r\n          newResults = data.getTopRated;\r\n        } else if (category === Category.UP_COMING) {\r\n          newResults = data.getUpcoming;\r\n        } else if (category === Category.NOW_PLAYING) {\r\n          newResults = data.getNowPlaying;\r\n        }\r\n        newData = [...movieData.results, ...newResults.results];\r\n        const dedupedData = dedupe(\r\n          newData,\r\n          (value: Movie) => value.id\r\n        ) as Movie[];\r\n        setMovieData({\r\n          results: dedupedData,\r\n          total_results: newResults.total_results,\r\n        });\r\n      }\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleFetchMore = (page: number) => getMovies(page);\r\n\r\n  let view = null;\r\n\r\n  if (loading) {\r\n    view = (\r\n      <Slider\r\n        movies={[]}\r\n        title={title}\r\n        fetchMore={handleFetchMore}\r\n        sliderType={SliderType.movies}\r\n        totalResults={0}\r\n        loadingState={LoadingState.LOADING}\r\n        id={nanoid()}\r\n      ></Slider>\r\n    );\r\n  } else if (movieData.results.length) {\r\n    view = (\r\n      <Slider\r\n        movies={\r\n          movieData\r\n            ? movieData.results.map((item: any) =>\r\n                Object.assign({}, item, {\r\n                  hide: false,\r\n                  selected: false,\r\n                })\r\n              )\r\n            : []\r\n        }\r\n        title={title}\r\n        fetchMore={handleFetchMore}\r\n        totalResults={movieData.total_results ? movieData.total_results : 0}\r\n        loadingState={LoadingState.LOADED}\r\n        id={nanoid()}\r\n        sliderType={SliderType.movies}\r\n      ></Slider>\r\n    );\r\n  }\r\n\r\n  return view;\r\n};\r\n\r\nexport default MovieContainer;\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\search\\index.tsx",["403","404"],"import {DocumentNode, useApolloClient} from '@apollo/client';\r\nimport emotion from '@emotion/styled';\r\nimport React from 'react';\r\nimport MediaObjects from '../../components/media-objects/media-objects';\r\nimport MovieDetails from '../../containers/details/movieDetails';\r\nimport useResponsive from '../../effects/useResponsive';\r\nimport {searchMovies} from '../../gqls/movies';\r\nimport {searchTv} from '../../gqls/tv';\r\nimport Movie from '../../models/Media';\r\nimport {MediaObject, ThumbnailSize} from '../../models/MediaObject';\r\nimport TvDetails from '../details/tvDetails';\r\nimport {MediaType, SearchContainer as SearchContainerModel} from '../models';\r\n\r\nconst getQuery: (m: MediaType) => DocumentNode = (type) => {\r\n  switch (type) {\r\n    case MediaType.MOVIES:\r\n      return searchMovies;\r\n    case MediaType.TV:\r\n      return searchTv;\r\n  }\r\n};\r\n\r\nconst Wrapper = emotion.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n`;\r\n\r\nconst ResultsWrapper = emotion.div`\r\n  width: 100%;\r\n`;\r\n\r\nconst DetailsWrapper = emotion.section`\r\n  margin-top: 2rem;\r\n  width: 100%;\r\n  height: 400px;\r\n`;\r\n\r\nconst SearchContainer: React.FunctionComponent<SearchContainerModel> = React.memo(\r\n  ({query, type}) => {\r\n    const client = useApolloClient();\r\n    const [movieData, setMovieData] = React.useState<{\r\n      results: Movie[];\r\n      total_results?: number;\r\n    }>({\r\n      results: [],\r\n      total_results: 0,\r\n    });\r\n    const gridRef = React.useRef(null);\r\n    const [loading, setLoading] = React.useState(false);\r\n    const resx = useResponsive();\r\n    const [movieId, setSelectedMovieId] = React.useState<MediaObject>({\r\n      id: 0,\r\n      name: '',\r\n    });\r\n\r\n    React.useEffect(() => {\r\n      if (query) {\r\n        getResults(1);\r\n      }\r\n    }, [query]);\r\n\r\n    const getResults = async (page: number) => {\r\n      setLoading(true);\r\n      const {data} = await client.query({\r\n        query: getQuery(type),\r\n        variables: {\r\n          lang: 'en-US',\r\n          page,\r\n          query,\r\n        },\r\n      });\r\n\r\n      if (data) {\r\n        let newData = [] as Movie[];\r\n        if (movieData.results) {\r\n          let newResults = [];\r\n          if (type === MediaType.MOVIES) {\r\n            newResults = data.searchMovies;\r\n          } else if (type === MediaType.TV) {\r\n            newResults = data.searchTv;\r\n          }\r\n          newData = [...movieData.results, ...newResults.results];\r\n          setMovieData({\r\n            results: newData,\r\n            total_results: newResults.total_results,\r\n          });\r\n        }\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n\r\n    const handleFetchMore = (page: number) => getResults(page);\r\n\r\n    const handleSelection = (m: MediaObject) => {\r\n      m && setSelectedMovieId(m);\r\n    };\r\n\r\n    let view = null;\r\n\r\n    if (loading) {\r\n      // view = <Loader size={LoaderSize.large} />;\r\n    } else if (!loading && movieData && movieData.results.length) {\r\n      const data: MediaObject[] = movieData.results.map(\r\n        ({\r\n          original_title,\r\n          poster_path,\r\n          id,\r\n          release_date,\r\n          overview,\r\n          vote_average,\r\n          original_name,\r\n          first_air_date,\r\n        }) => ({\r\n          id: id,\r\n          name: original_title || original_name || '',\r\n          overview,\r\n          path: poster_path || '',\r\n          release_date: release_date || first_air_date || '',\r\n          visible: false,\r\n          vote_average,\r\n        })\r\n      );\r\n      view = (\r\n        <MediaObjects\r\n          items={data}\r\n          id=\"search\"\r\n          height={resx.isBigScreen ? 400 : 320}\r\n          thumbnailSize={ThumbnailSize.large}\r\n          itemSize={resx.isBigScreen ? 230 : 180}\r\n          onSelect={handleSelection}\r\n          noTitle\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Wrapper ref={gridRef}>\r\n        <ResultsWrapper>{view}</ResultsWrapper>\r\n        <DetailsWrapper>\r\n          {type === MediaType.MOVIES ? (\r\n            <MovieDetails\r\n              movieId={movieId.id}\r\n              hide={!movieId.id}\r\n              handleClose={() => setSelectedMovieId({id: 0})}\r\n            />\r\n          ) : (\r\n            <TvDetails\r\n              movieId={movieId.id}\r\n              hide={!movieId.id}\r\n              handleClose={() => setSelectedMovieId({id: 0})}\r\n            />\r\n          )}\r\n        </DetailsWrapper>\r\n      </Wrapper>\r\n    );\r\n  },\r\n  (prev, cur) => prev.query === cur.query || prev.type === cur.type\r\n);\r\n\r\nexport default SearchContainer;\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-toggle\\media-toggle.styles.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-search-box\\media-searchbox.styles.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\logo\\logo.styles.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\gqls\\movies.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\gqls\\tv.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\models\\Slider.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\models\\MediaObject.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\details\\tvDetails.tsx",["405","406"],"import { useApolloClient } from '@apollo/client';\r\nimport memoize from 'memoize-one';\r\nimport React from 'react';\r\nimport { animated, config, useSpring } from 'react-spring';\r\nimport CardDetails from '../../components/media-details/details-main';\r\nimport Loader from '../../components/media-loader';\r\nimport useResponsive, { responsiveProps } from '../../effects/useResponsive';\r\nimport { details } from '../../gqls/tvDetails';\r\nimport { SliderType } from '../../models/Slider';\r\nimport { TvDetail } from '../../models/TvDetail';\r\nimport emotion from '@emotion/styled';\r\n\r\nconst getHeight = memoize(\r\n  ({ isBigScreen, isTabletOrMobile }: responsiveProps) => {\r\n    let height;\r\n    if (isBigScreen) {\r\n      height = 820;\r\n    } else if (isTabletOrMobile) {\r\n      height = 700;\r\n    } else {\r\n      height = 450;\r\n    }\r\n    return height;\r\n  }\r\n);\r\n\r\nconst MovieDetails: React.FunctionComponent<{\r\n  movieId: number | string;\r\n  handleClose?: () => void;\r\n  hide?: boolean;\r\n}> = ({ movieId, handleClose, hide }) => {\r\n  const [data, setData] = React.useState<TvDetail | null>();\r\n  const [loading, setLoading] = React.useState(false);\r\n  const client = useApolloClient();\r\n  const [mounted, setMounted] = React.useState(false);\r\n  const wrapperRef = React.useRef<HTMLDivElement>(null);\r\n  const resxProps = useResponsive();\r\n\r\n  const [props, setProps] = useSpring(() => ({\r\n    height: 0,\r\n    opacity: 1,\r\n    config: config.default,\r\n  }));\r\n\r\n  React.useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (mounted && movieId) {\r\n      setLoading(true);\r\n      if (wrapperRef && wrapperRef.current) {\r\n        setProps({\r\n          height: getHeight(resxProps),\r\n          from: {\r\n            height: 0,\r\n          },\r\n          onRest: () => executeQuery(),\r\n        });\r\n      }\r\n    }\r\n  }, [movieId]);\r\n\r\n  React.useEffect(() => {\r\n    if (mounted && hide) {\r\n      setProps({\r\n        height: 0,\r\n        from: {\r\n          height: getHeight(resxProps),\r\n        },\r\n      });\r\n    }\r\n  }, [hide]);\r\n\r\n  const executeQuery = async () => {\r\n    const { data } = await client.query({\r\n      query: details,\r\n      variables: {\r\n        lang: 'en-US',\r\n        id: movieId,\r\n      },\r\n    });\r\n\r\n    setData(data.getTvDetails);\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  let view = null;\r\n\r\n  if (!loading && data && !hide) {\r\n    const {\r\n      poster_path,\r\n      original_name: title,\r\n      id,\r\n      overview,\r\n      genres,\r\n      episode_run_time: runtime,\r\n      first_air_date: release_date,\r\n      original_language,\r\n      vote_average,\r\n      production_companies,\r\n    } = data;\r\n\r\n    view = (\r\n      <CardDetails\r\n        poster_path={poster_path}\r\n        title={title}\r\n        id={id}\r\n        overview={overview}\r\n        handleClose={handleClose}\r\n        genres={genres}\r\n        runtime={runtime}\r\n        release_date={release_date}\r\n        original_language={original_language}\r\n        isLoading={false}\r\n        vote_average={vote_average}\r\n        key={movieId}\r\n        production_companies={production_companies}\r\n        sliderType={SliderType.tv}\r\n      />\r\n    );\r\n  } else if (loading) {\r\n    view = <Loader />;\r\n  }\r\n\r\n  const Wrapper = emotion(animated.div)`\r\n    position: relative;\r\n    width: 98%;\r\n    margin: 0 auto;\r\n    border-radius: 0.2rem;\r\n  `;\r\n\r\n  return (\r\n    <Wrapper style={props} ref={wrapperRef} key={movieId}>\r\n      {view}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default React.memo(\r\n  MovieDetails,\r\n  (prev, cur) => prev.movieId === cur.movieId\r\n);\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\details\\movieDetails.tsx",["407","408"],"import {useApolloClient} from '@apollo/client';\r\nimport emotion from '@emotion/styled';\r\nimport memoize from 'memoize-one';\r\nimport React from 'react';\r\nimport {animated, config, useSpring} from 'react-spring';\r\nimport CardDetails from '../../components/media-details/details-main';\r\nimport Loader from '../../components/media-loader';\r\nimport useResponsive, {responsiveProps} from '../../effects/useResponsive';\r\nimport {details} from '../../gqls/movieDetails';\r\nimport {MovieDetail} from '../../models/MovieDetails';\r\nimport {SliderType} from '../../models/Slider';\r\n\r\nconst getHeight = memoize(\r\n  ({isBigScreen, isTabletOrMobile}: responsiveProps) => {\r\n    let height;\r\n    if (isBigScreen) {\r\n      height = 820;\r\n    } else if (isTabletOrMobile) {\r\n      height = 720;\r\n    } else {\r\n      height = 500;\r\n    }\r\n    return height;\r\n  }\r\n);\r\n\r\nconst MovieDetails: React.FunctionComponent<{\r\n  movieId: number | string;\r\n  handleClose?: () => void;\r\n  hide?: boolean;\r\n}> = ({movieId, handleClose, hide}) => {\r\n  const [data, setData] = React.useState<MovieDetail | null>();\r\n  const [loading, setLoading] = React.useState(false);\r\n  const client = useApolloClient();\r\n  const [mounted, setMounted] = React.useState(false);\r\n  const wrapperRef = React.useRef<HTMLDivElement>(null);\r\n  const resxProps = useResponsive();\r\n\r\n  const [props, setProps] = useSpring(() => ({\r\n    height: 0,\r\n    opacity: 1,\r\n    config: config.default,\r\n  }));\r\n\r\n  React.useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (mounted && movieId) {\r\n      setLoading(true);\r\n      if (wrapperRef && wrapperRef.current) {\r\n        setProps({\r\n          height: getHeight(resxProps),\r\n          from: {\r\n            height: 0,\r\n          },\r\n          onRest: () => executeQuery(),\r\n        });\r\n      }\r\n    }\r\n  }, [movieId]);\r\n\r\n  React.useEffect(() => {\r\n    if (mounted && hide) {\r\n      setProps({\r\n        height: 0,\r\n        from: {\r\n          height: getHeight(resxProps),\r\n        },\r\n      });\r\n    }\r\n  }, [hide]);\r\n\r\n  const executeQuery = async () => {\r\n    const {data} = await client.query({\r\n      query: details,\r\n      variables: {\r\n        lang: 'en-US',\r\n        id: movieId,\r\n      },\r\n    });\r\n\r\n    setData(data.getDetails);\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  let view = null;\r\n\r\n  if (!loading && data && !hide) {\r\n    const {\r\n      poster_path,\r\n      title,\r\n      id,\r\n      overview,\r\n      genres,\r\n      runtime,\r\n      release_date,\r\n      original_language,\r\n      imdb_id,\r\n      vote_average,\r\n      video,\r\n      production_companies,\r\n    } = data;\r\n\r\n    view = (\r\n      <CardDetails\r\n        poster_path={poster_path}\r\n        title={title}\r\n        id={id}\r\n        overview={overview}\r\n        handleClose={handleClose}\r\n        genres={genres}\r\n        runtime={runtime}\r\n        release_date={release_date}\r\n        original_language={original_language}\r\n        isLoading={false}\r\n        imdb_id={imdb_id}\r\n        vote_average={vote_average}\r\n        video={video}\r\n        key={movieId}\r\n        production_companies={production_companies}\r\n        sliderType={SliderType.movies}\r\n      />\r\n    );\r\n  } else if (loading) {\r\n    view = <Loader />;\r\n  }\r\n\r\n  const Wrapper = emotion(animated.div)`\r\n    position: relative;\r\n    width: 98%;\r\n    margin: 0 auto;\r\n    border-radius: 0.2rem;\r\n  `;\r\n\r\n  return (\r\n    <Wrapper style={props} ref={wrapperRef} key={movieId}>\r\n      {view}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default React.memo(\r\n  MovieDetails,\r\n  (prev, cur) => prev.movieId === cur.movieId\r\n);\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-objects\\media-objects.tsx",["409","410"],"import React from 'react';\r\nimport {\r\n  MediaObject as MediaObjectModel,\r\n  ThumbnailSize,\r\n  MediaObject,\r\n} from '../../models/MediaObject';\r\nimport {\r\n  ObjectsWrapper,\r\n  ObjectsContainer,\r\n  ScrollLeftBtn,\r\n  ScrollRightBtn,\r\n  ObjectHeader,\r\n  ExpandButton,\r\n} from './media-objects.styles';\r\nimport {\r\n  ChevronLeftIcon,\r\n  ChevronRightIcon,\r\n  ChevronRightSolidIcon,\r\n} from './../icons/index';\r\nimport withExtendedInfo from '../HOCS/withExtendInfo';\r\nimport Card from '../media-card/card';\r\nimport {nanoid} from 'nanoid';\r\nimport useResponsive from '../../effects/useResponsive';\r\nimport MediaList from './media-list';\r\nimport MediaModal from '../media-modal/media-modal';\r\nimport MediaGrid from './media-grid';\r\nimport {throttle} from 'throttle-debounce';\r\n\r\nconst ExtendedCard = withExtendedInfo(Card);\r\n\r\nenum ScrollDir {\r\n  LEFT = 'LEFT',\r\n  RIGHT = 'RIGHT',\r\n}\r\n\r\nexport interface MediaObjectsModel {\r\n  id: number | string;\r\n  items: MediaObjectModel[];\r\n  title?: string;\r\n  height: number;\r\n  itemSize: number;\r\n  thumbnailSize: ThumbnailSize;\r\n  noTitle?: boolean;\r\n  noBackground?: boolean;\r\n  useExtendedCard?: boolean;\r\n  hideObjectsWithNoImage?: boolean;\r\n  showExpand?: boolean;\r\n  onSelect?: (m: MediaObject) => void;\r\n}\r\n\r\nconst MediaObjects: React.FunctionComponent<MediaObjectsModel> = React.memo(\r\n  ({\r\n    items,\r\n    height,\r\n    itemSize,\r\n    thumbnailSize,\r\n    title,\r\n    noTitle,\r\n    noBackground,\r\n    useExtendedCard,\r\n    id,\r\n    hideObjectsWithNoImage,\r\n    showExpand,\r\n    onSelect,\r\n  }) => {\r\n    const containerRef = React.createRef<HTMLUListElement>();\r\n    const rWindowRef = React.useRef<HTMLDivElement>(null);\r\n    const [showExpandedView, setExpandedView] = React.useState(false);\r\n\r\n    const [config, setConfig] = React.useState({\r\n      show: false,\r\n      clientWidth: 0,\r\n      count: 0,\r\n      clientHeight: 0,\r\n    });\r\n    const [disableRightNav, setDisableRightNav] = React.useState(true);\r\n    const [disableLeftNav, setDisableLeftNav] = React.useState(true);\r\n    const containerId = nanoid();\r\n    const resxProps = useResponsive();\r\n\r\n    const handleNav = (dir: ScrollDir) => {\r\n      if (rWindowRef && rWindowRef.current) {\r\n        if (dir === ScrollDir.RIGHT) {\r\n          rWindowRef.current.scrollTo({\r\n            behavior: 'smooth',\r\n            left:\r\n              rWindowRef.current.scrollLeft +\r\n              Math.round(config.clientWidth * 0.8),\r\n          });\r\n        } else {\r\n          rWindowRef.current.scrollTo({\r\n            behavior: 'smooth',\r\n            left:\r\n              rWindowRef.current.scrollLeft -\r\n              Math.round(config.clientWidth * 0.8),\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n      setTimeout(() => {\r\n        if (containerRef && containerRef.current) {\r\n          const node = containerRef.current as HTMLUListElement;\r\n          const {clientWidth, clientHeight} = node;\r\n          setConfig({\r\n            show: true,\r\n            clientWidth,\r\n            count: hideObjectsWithNoImage\r\n              ? items.filter((item) => item.path).length\r\n              : items.length,\r\n            clientHeight: clientHeight - 40,\r\n          });\r\n        }\r\n      }, 500);\r\n    }, []);\r\n\r\n    const onItemsRendered = React.useCallback(() => {\r\n      if (rWindowRef && rWindowRef.current) {\r\n        const node = rWindowRef.current as HTMLDivElement;\r\n        const {clientWidth, scrollWidth} = node;\r\n        const scrolledWidth = clientWidth + rWindowRef.current.scrollLeft;\r\n\r\n        if (Math.ceil(scrolledWidth) === scrollWidth) {\r\n          setDisableRightNav(true);\r\n        }\r\n\r\n        if (scrolledWidth > clientWidth) {\r\n          setDisableLeftNav(false);\r\n        }\r\n\r\n        if (scrolledWidth === clientWidth) {\r\n          setDisableLeftNav(true);\r\n        }\r\n\r\n        if (scrolledWidth < scrollWidth) {\r\n          setDisableRightNav(false);\r\n        }\r\n      }\r\n    }, []);\r\n\r\n    const onModalClose = React.useCallback(() => setExpandedView(false), []);\r\n\r\n    let view = null;\r\n\r\n    if (config.show) {\r\n      view = (\r\n        <>\r\n          {!noTitle && <ObjectHeader>{title}</ObjectHeader>}\r\n          {\r\n            <MediaList\r\n              layout=\"horizontal\"\r\n              itemCount={config.count}\r\n              itemSize={itemSize}\r\n              width={config.clientWidth}\r\n              height={config.clientHeight}\r\n              outerRef={rWindowRef}\r\n              onItemsRendered={throttle(250, onItemsRendered)}\r\n              items={items}\r\n              noTitle={noTitle}\r\n              useExtendedCard={useExtendedCard}\r\n              thumbnailSize={thumbnailSize}\r\n              id={title ? id + title : id.toString()}\r\n              containerId={containerId}\r\n              hideObjectsWithNoImage={hideObjectsWithNoImage}\r\n              onSelect={onSelect}\r\n            />\r\n          }\r\n        </>\r\n      );\r\n    } else {\r\n      view = null;\r\n    }\r\n    return (\r\n      <ObjectsContainer height={height} noBackground={noBackground}>\r\n        {showExpand && !disableRightNav && (\r\n          <ExpandButton onClick={() => setExpandedView(true)}>\r\n            <span>view all</span>\r\n            <ChevronRightSolidIcon color=\"#fff\"></ChevronRightSolidIcon>\r\n          </ExpandButton>\r\n        )}\r\n\r\n        {showExpand && (\r\n          <MediaModal\r\n            onClose={onModalClose}\r\n            open={showExpandedView}\r\n            title={title}\r\n          >\r\n            <MediaGrid\r\n              items={items}\r\n              itemHeight={height}\r\n              itemWidth={itemSize}\r\n              // itemHeight={resxProps.isBigScreen ? 250 : 160}\r\n              // itemWidth={resxProps.isBigScreen ? 180 : 130}\r\n            ></MediaGrid>\r\n          </MediaModal>\r\n        )}\r\n\r\n        <ScrollLeftBtn\r\n          onClick={() => handleNav(ScrollDir.LEFT)}\r\n          disable={disableLeftNav}\r\n          size={thumbnailSize}\r\n          resx={resxProps}\r\n        >\r\n          <ChevronLeftIcon color={!disableLeftNav ? '#cc0000' : '#191919'} />\r\n        </ScrollLeftBtn>\r\n        <ObjectsWrapper\r\n          ref={containerRef}\r\n          leftButton={disableLeftNav}\r\n          rightButton={disableRightNav}\r\n          noBackground={noBackground}\r\n          resx={resxProps}\r\n        >\r\n          {view}\r\n        </ObjectsWrapper>\r\n        <ScrollRightBtn\r\n          onClick={() => handleNav(ScrollDir.RIGHT)}\r\n          disable={disableRightNav}\r\n          size={thumbnailSize}\r\n          resx={resxProps}\r\n        >\r\n          <ChevronRightIcon color={!disableRightNav ? '#cc0000' : '#191919'} />\r\n        </ScrollRightBtn>\r\n      </ObjectsContainer>\r\n    );\r\n  },\r\n  (prev, current) => prev.id === current.id\r\n);\r\n\r\nexport default MediaObjects;\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-slider\\index.tsx",["411","412","413"],"import * as React from \"react\";\r\nimport {\r\n  Wrapper as WrapperContainer,\r\n  Header,\r\n  MoviesWrapper,\r\n  ExpandControl,\r\n  DetailsWrapper,\r\n  Title,\r\n} from \"./index.styles\";\r\nimport Movies from \"./collection\";\r\nimport { Button } from \"../commons/styles\";\r\nimport { useSpring, config } from \"react-spring\";\r\nimport {\r\n  ChevronDownCircleIcon,\r\n  ChevronUpCircleIcon,\r\n  PlusCircleIcon,\r\n  MinusCircleIcon,\r\n} from \"../icons\";\r\nimport Slider, { SliderType, LoadingState } from \"../../models/Slider\";\r\nimport Movie from \"../../models/Media\";\r\nimport useResponsive, { responsiveProps } from \"../../effects/useResponsive\";\r\nimport memoize from \"memoize-one\";\r\n\r\nconst MovieDetails = React.lazy(() =>\r\n  import(\"../../containers/details/movieDetails\")\r\n);\r\n\r\nconst TvDetails = React.lazy(() =>\r\n  import(\"../../containers/details/tvDetails\")\r\n);\r\n\r\nconst getHeight = memoize((props: responsiveProps) => {\r\n  if (props.isBigScreen) {\r\n    return 280;\r\n  } else if (props.isDesktopOrLaptop) {\r\n    return 220;\r\n  } else if (props.isTabletOrMobile) {\r\n    return 200;\r\n  } else {\r\n    return 220;\r\n  }\r\n});\r\n\r\nconst SliderView: React.FunctionComponent<Slider> = ({\r\n  movies,\r\n  title,\r\n  fetchMore,\r\n  totalResults,\r\n  loadingState,\r\n  id,\r\n  sliderType,\r\n}: Slider) => {\r\n  const [expandFull, setExpandFull] = React.useState(false);\r\n  const firstRun = React.useRef(true);\r\n  const [page, setPage] = React.useState(1);\r\n  const [showDetails, setShowDetails] = React.useState<{\r\n    state: boolean;\r\n    selectedMovie: number | string;\r\n  }>({\r\n    state: false,\r\n    selectedMovie: 0,\r\n  });\r\n  const resxProps = useResponsive();\r\n\r\n  const [props, setProps] = useSpring(() => ({\r\n    height: `${getHeight(resxProps)}px`,\r\n    config: config.default,\r\n    delay: 0,\r\n  }));\r\n\r\n  const handleExpandFull = React.useCallback(() => setExpandFull(!expandFull), [\r\n    expandFull,\r\n  ]);\r\n\r\n  React.useEffect(() => {\r\n    if (firstRun.current) {\r\n      firstRun.current = false;\r\n    } else {\r\n      const height = getHeight(resxProps);\r\n      if (!expandFull || showDetails.state) {\r\n        setProps({\r\n          height: `${height}px`,\r\n          from: {\r\n            height: `${height * 2}px`,\r\n          },\r\n        });\r\n      } else {\r\n        setProps({\r\n          height: `${height * 2}px`,\r\n          from: {\r\n            height: `${height}px`,\r\n          },\r\n        });\r\n      }\r\n    }\r\n  }, [expandFull, showDetails, firstRun]);\r\n\r\n  const handleLoadMore = React.useCallback(() => {\r\n    if (fetchMore) {\r\n      fetchMore(page + 1);\r\n    }\r\n    setPage(page + 1);\r\n  }, [fetchMore, page]);\r\n\r\n  const handleMovieSelection = React.useCallback(\r\n    (selectedMovie?: Movie, clear?: boolean) => {\r\n      if (clear) {\r\n        setShowDetails({ state: false, selectedMovie: 0 });\r\n      } else {\r\n        setShowDetails({\r\n          state: true,\r\n          selectedMovie: selectedMovie?.id || 0,\r\n        });\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const onDetailsClose = React.useCallback(\r\n    () => setShowDetails({ state: false, selectedMovie: 0 }),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <WrapperContainer\r\n      loadingState={loadingState}\r\n      detailsEnabled={showDetails.selectedMovie ? 1 : 0}\r\n      id={`slider-wrapper-${id}`}\r\n    >\r\n      <div id={`extended-card-enclosure-${id}`}></div>\r\n\r\n      <Header>\r\n        <Title>{title}</Title>\r\n      </Header>\r\n\r\n      {/* movies list */}\r\n      {\r\n        <MoviesWrapper style={props}>\r\n          <Movies\r\n            items={movies}\r\n            slider={!expandFull ? 1 : 0}\r\n            expandFull={expandFull ? 1 : 0}\r\n            fetchMore={handleLoadMore}\r\n            totalResults={totalResults}\r\n            loadingState={loadingState}\r\n            onSelection={handleMovieSelection}\r\n            showDetails={showDetails.state}\r\n            selectedIndex={showDetails.selectedMovie as number}\r\n            id={id}\r\n          ></Movies>\r\n        </MoviesWrapper>\r\n      }\r\n\r\n      {\r\n        <DetailsWrapper>\r\n          <React.Suspense fallback={<div></div>}>\r\n            {sliderType === SliderType.movies ? (\r\n              <MovieDetails\r\n                movieId={showDetails.selectedMovie}\r\n                handleClose={onDetailsClose}\r\n                hide={!showDetails.state}\r\n              />\r\n            ) : (\r\n              <TvDetails\r\n                movieId={showDetails.selectedMovie}\r\n                handleClose={onDetailsClose}\r\n                hide={!showDetails.state}\r\n              />\r\n            )}\r\n          </React.Suspense>\r\n        </DetailsWrapper>\r\n      }\r\n\r\n      {/* footer section */}\r\n      {!showDetails.state && loadingState === LoadingState.LOADED && (\r\n        <ExpandControl resx={resxProps}>\r\n          <Button size=\"medium\" onClick={handleExpandFull} resx={resxProps}>\r\n            {expandFull ? (\r\n              <ChevronUpCircleIcon color=\"#7c7c7c\" />\r\n            ) : (\r\n              <ChevronDownCircleIcon color=\"#7c7c7c\" />\r\n            )}\r\n          </Button>\r\n        </ExpandControl>\r\n      )}\r\n    </WrapperContainer>\r\n  );\r\n};\r\n\r\nexport default SliderView;\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-objects\\media-objects.styles.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\gqls\\movieDetails.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-objects\\media-grid.tsx",["414"],"import React, { CSSProperties } from 'react';\r\nimport {MediaObject, ThumbnailSize} from '../../models/MediaObject';\r\nimport {FixedSizeGrid} from 'react-window';\r\nimport {MediaGridWrapper} from './media-grid.style';\r\nimport {MediaObjectContainer} from './media-objects.styles';\r\nimport MediaObjectView from './media-object';\r\n\r\ninterface MediaGridModel {\r\n  items: MediaObject[];\r\n  itemHeight: number;\r\n  itemWidth: number;\r\n}\r\n\r\nconst MediaGrid: React.FunctionComponent<MediaGridModel> = ({\r\n  items,\r\n  itemHeight,\r\n  itemWidth,\r\n}) => {\r\n  const wrapperRef = React.useRef(null);\r\n  const gridRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  const [gridConfig, setConfig] = React.useState({\r\n    columnCount: 0,\r\n    rowCount: 0,\r\n    showGrid: false,\r\n    containerHeight: 0,\r\n    containerWidth: 0,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    const node: HTMLElement | null = ((wrapperRef &&\r\n      wrapperRef.current) as unknown) as HTMLElement;\r\n    if (node) {\r\n      const columnCount = Math.floor(node.clientWidth / itemWidth);\r\n      const rowCount = Math.ceil(items.length / columnCount);\r\n\r\n      setConfig({\r\n        columnCount,\r\n        rowCount,\r\n        showGrid: true,\r\n        containerHeight: node.clientHeight - 20,\r\n        containerWidth: columnCount * itemWidth + 20,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  let view = null;\r\n\r\n  if (gridConfig.showGrid) {\r\n    const {columnCount, rowCount, containerHeight, containerWidth} = gridConfig;\r\n    view = (\r\n      <FixedSizeGrid\r\n        columnCount={columnCount}\r\n        rowCount={rowCount}\r\n        columnWidth={itemWidth}\r\n        height={containerHeight}\r\n        width={containerWidth}\r\n        rowHeight={itemHeight}\r\n        style={{margin: '0 auto', overflowY: 'auto'}}\r\n        outerRef={gridRef}\r\n      >\r\n        {({columnIndex, style, rowIndex}) => {\r\n          const item = items[rowIndex * columnCount + columnIndex];\r\n\r\n          if (item) {\r\n            const {name, path, id, info} = item;\r\n\r\n            return (\r\n              <MediaObjectContainer\r\n                key={`${id}-${columnIndex}-${name}`}\r\n                style={style as CSSProperties}\r\n              >\r\n                <MediaObjectView\r\n                  name={name}\r\n                  path={path}\r\n                  id={id}\r\n                  info={info}\r\n                  thumbnailSize={ThumbnailSize.large}\r\n                />\r\n              </MediaObjectContainer>\r\n            );\r\n          } else {\r\n            return null;\r\n          }\r\n        }}\r\n      </FixedSizeGrid>\r\n    );\r\n  } else {\r\n    view = null;\r\n  }\r\n\r\n  return <MediaGridWrapper ref={wrapperRef}>{view}</MediaGridWrapper>;\r\n};\r\n\r\nexport default MediaGrid;\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-objects\\media-list.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\gqls\\tvDetails.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-modal\\media-modal.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-card\\card.tsx",["415","416"],"import * as React from 'react';\r\nimport Movie from '../../models/Media';\r\nimport {\r\n  CardContainer,\r\n  CardCheckedWrapper,\r\n  ImageIconWrapper,\r\n} from './card.style';\r\nimport {CardSize} from '../../models/CardSize';\r\nimport Poster from '../media-poster/poster';\r\nimport {CheckIcon, ImageIcon} from '../icons';\r\nimport {responsiveProps} from '../../effects/useResponsive';\r\nimport {MediaObject} from '../../models/MediaObject';\r\nimport {atom} from 'recoil';\r\n\r\nexport type MovieType = Movie & {\r\n  index?: number;\r\n  loadingCard?: boolean;\r\n  onSelect?(m: MediaObject): void;\r\n  size?: CardSize;\r\n  style?: any;\r\n  resxProps?: responsiveProps;\r\n  autoHeight?: boolean;\r\n};\r\n\r\nexport default React.memo(\r\n  ({\r\n    id,\r\n    poster_path,\r\n    onSelect,\r\n    selected,\r\n    size,\r\n    index,\r\n    loadingCard,\r\n    title,\r\n    resxProps,\r\n    autoHeight,\r\n    vote_average,\r\n  }: MovieType) => {\r\n    const cardRef = React.useRef<HTMLDivElement>(null);\r\n    const handleSelection = React.useCallback(\r\n      (id: number | string) => {\r\n        onSelect && onSelect({id, name: title});\r\n      },\r\n      [id]\r\n    );\r\n\r\n    return (\r\n      <>\r\n        {!loadingCard ? (\r\n          <CardContainer\r\n            onClick={() => id && handleSelection(id)}\r\n            resxProps={resxProps}\r\n            selected={selected}\r\n            size={size}\r\n            ref={cardRef}\r\n            autoHeight={autoHeight}\r\n          >\r\n            {\r\n              <div style={{height: '100%'}}>\r\n                <Poster\r\n                  poster_path={poster_path ? poster_path : ''}\r\n                  index={index}\r\n                  rating={vote_average}\r\n                  size={size}\r\n                  title={title}\r\n                  id={id}\r\n                ></Poster>\r\n              </div>\r\n            }\r\n            {selected && (\r\n              <CardCheckedWrapper>\r\n                <CheckIcon />\r\n              </CardCheckedWrapper>\r\n            )}\r\n          </CardContainer>\r\n        ) : (\r\n          <CardContainer size={size} isLoadingCard={loadingCard ? 1 : 0}>\r\n            <ImageIconWrapper>\r\n              <ImageIcon color=\"#4b4848\" />\r\n            </ImageIconWrapper>\r\n          </CardContainer>\r\n        )}\r\n      </>\r\n    );\r\n  },\r\n  (prev, current) => prev.id === current.id\r\n);\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\HOCS\\withExtendInfo.tsx",["417","418"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { MovieType } from '../media-card/card';\r\nimport CardExtended, {\r\n  CardExtendedModel,\r\n  PositioningStrategy\r\n} from './../media-card/card-extended';\r\nimport { ViewBtnWrapper, Wrapper } from './withExtendInfo.styles';\r\n\r\ninterface State {\r\n  showExtendIcon: boolean;\r\n  flipCard: boolean;\r\n  showPane: boolean;\r\n  showIcon: boolean;\r\n  isMouseActive: boolean;\r\n  position?: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n}\r\n\r\nexport type CardExtendCustomModel = CardExtendedModel & MovieType;\r\n\r\nexport default function <P extends CardExtendCustomModel>(\r\n  Component: React.FunctionComponent<MovieType>\r\n) {\r\n  return class ExtendInfoHOC extends React.Component<P, State> {\r\n    private elementRef: React.RefObject<HTMLDivElement>;\r\n    private timer: number;\r\n\r\n    constructor(props: P) {\r\n      super(props);\r\n      this.elementRef = React.createRef();\r\n      this.state = {\r\n        showExtendIcon: false,\r\n        flipCard: false,\r\n        showPane: false,\r\n        showIcon: false,\r\n        isMouseActive: false,\r\n        position: {\r\n          x: 0,\r\n          y: 0,\r\n        },\r\n      };\r\n      this.showPane = this.showPane.bind(this);\r\n      this.startShowPaneTimer = this.startShowPaneTimer.bind(this);\r\n      this.endShowPaneTimer = this.endShowPaneTimer.bind(this);\r\n      this.hidePane = this.hidePane.bind(this);\r\n      this.startTimer = this.startTimer.bind(this);\r\n      this.endTimer = this.endTimer.bind(this);\r\n      this.handleSelection = this.handleSelection.bind(this);\r\n      this.timer = 0;\r\n    }\r\n\r\n    startTimer(ev: React.MouseEvent) {\r\n      this.timer = window.setTimeout(() => {\r\n        if (this.state.isMouseActive) {\r\n          this.showPane(ev);\r\n        }\r\n      }, 750);\r\n    }\r\n\r\n    endTimer() {\r\n      window.clearTimeout(this.timer);\r\n    }\r\n\r\n    showPane(ev: React.MouseEvent) {\r\n      const node = this.elementRef.current as HTMLElement;\r\n      const rects = node.getBoundingClientRect();\r\n      const {positioningStrategy} = this.props;\r\n      let flipCard = false;\r\n      let timer: number;\r\n      let x, y;\r\n\r\n      // check if the card needs to be flipped\r\n      if (positioningStrategy === PositioningStrategy.absolute) {\r\n        const width = window.screen.width > 1823 ? 600 : 480;\r\n        if (rects.left + width > window.screen.width) {\r\n          x = rects.left - (width - node.clientWidth);\r\n          flipCard = true;\r\n        } else {\r\n          x = rects.left;\r\n        }\r\n        y = rects.top;\r\n      } else {\r\n        x = node.offsetLeft;\r\n        y = node.offsetTop;\r\n      }\r\n\r\n      // update the state\r\n      this.setState(\r\n        Object.assign({}, this.state, {\r\n          showPane: true,\r\n          flipCard,\r\n          position: {\r\n            x,\r\n            y,\r\n          },\r\n        })\r\n      );\r\n    }\r\n\r\n    hidePane(ev: React.MouseEvent) {\r\n      this.setState({\r\n        showPane: false,\r\n        showExtendIcon: false,\r\n      });\r\n    }\r\n\r\n    startShowPaneTimer(ev: React.MouseEvent) {\r\n      this.setState(\r\n        {\r\n          showIcon: true,\r\n          isMouseActive: true,\r\n        },\r\n        () => this.startTimer(ev)\r\n      );\r\n    }\r\n\r\n    endShowPaneTimer() {\r\n      this.setState(\r\n        {\r\n          showIcon: false,\r\n          isMouseActive: false,\r\n          showPane: false,\r\n        },\r\n        this.endTimer\r\n      );\r\n    }\r\n\r\n    handleSelection() {\r\n      this.setState({\r\n        showPane: false,\r\n        showIcon: false,\r\n      });\r\n      this.props.onSelect &&\r\n        this.props.onSelect({id: this.props.id, name: this.props.title});\r\n    }\r\n\r\n    render() {\r\n      const container: HTMLElement | null = document.getElementById(\r\n        `extended-card-enclosure-${this.props.containerId}`\r\n      );\r\n\r\n      const {\r\n        poster_path,\r\n        title,\r\n        id,\r\n        overview,\r\n        genres,\r\n        release_date,\r\n        autoHeight,\r\n        height,\r\n        vote_average,\r\n      } = this.props;\r\n      const {showPane, flipCard, position} = this.state;\r\n      return (\r\n        <Wrapper\r\n          onMouseEnter={this.startShowPaneTimer}\r\n          onMouseLeave={this.endShowPaneTimer}\r\n          ref={this.elementRef}\r\n        >\r\n          <Component {...this.props} />\r\n          {this.state.showExtendIcon && <ViewBtnWrapper />}\r\n          {showPane && container\r\n            ? ReactDOM.createPortal(\r\n                <CardExtended\r\n                  poster_path={poster_path}\r\n                  title={title}\r\n                  id={id}\r\n                  show={showPane}\r\n                  release_date={release_date}\r\n                  overview={overview}\r\n                  genres={genres}\r\n                  onClick={this.handleSelection}\r\n                  flip={flipCard}\r\n                  position={position}\r\n                  closePane={this.hidePane}\r\n                  autoHeight={autoHeight}\r\n                  height={height}\r\n                  vote_average={vote_average}\r\n                />,\r\n                container\r\n              )\r\n            : null}\r\n        </Wrapper>\r\n      );\r\n    }\r\n  };\r\n}\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\details-main.tsx",["419","420","421","422"],"import * as React from 'react';\r\nimport DetailsHome from './home/details-home';\r\nimport Images from '../../containers/details/images';\r\nimport Loader from '../media-loader';\r\nimport Movie from '../../models/Media';\r\nimport Panel from './panel/panel';\r\nimport useResponsive from '../../effects/useResponsive';\r\nimport {CloseIcon, MenuIcon} from '../icons/index';\r\nimport {tabs} from './panel/panel';\r\nimport {\r\n  DetailsCardWrapper,\r\n  DetailsWrapper,\r\n  CloseDetails,\r\n  ReviewsWrapper,\r\n  RecommendedMoviesWrapper,\r\n  RecommendedMoviesContainer,\r\n  PanelContainer,\r\n} from './details-main.styles';\r\nimport {SliderType} from '../../models/Slider';\r\nimport {RelatedMediaType, MediaType} from '../../containers/models';\r\n\r\nconst Reviews = React.lazy(() => import('../../containers/details/reviews'));\r\nconst Recommended = React.lazy(() => import('../../containers/related'));\r\nconst Similar = React.lazy(() => import('../../containers/related'));\r\n\r\ntype CardDetail = Movie & {\r\n  handleClose?: () => void;\r\n  isLoading: boolean;\r\n  sliderType: SliderType;\r\n};\r\n\r\nexport default ({\r\n  title,\r\n  handleClose,\r\n  id,\r\n  overview,\r\n  genres,\r\n  runtime,\r\n  release_date,\r\n  isLoading,\r\n  original_language,\r\n  vote_average,\r\n  production_companies,\r\n  sliderType,\r\n  imdb_id,\r\n}: CardDetail) => {\r\n  const wrapperRef = React.useRef<HTMLDivElement>(null);\r\n  const [show, setShow] = React.useState(false);\r\n  const [mounted, setMounted] = React.useState(false);\r\n  const [actvTab, setActvTab] = React.useState(tabs.home);\r\n  const resxProps = useResponsive();\r\n\r\n  React.useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (!mounted) {\r\n      return;\r\n    }\r\n  }, [show]);\r\n\r\n  const togglePanel = () => {\r\n    setShow(!show);\r\n  };\r\n\r\n  const handleSelection = React.useCallback((selectedTab: tabs) => {\r\n    setActvTab(selectedTab);\r\n    togglePanel();\r\n  }, []);\r\n\r\n  return (\r\n    <DetailsCardWrapper ref={wrapperRef}>\r\n      {!isLoading && (\r\n        <>\r\n          <DetailsWrapper>\r\n            {actvTab === tabs.home && (\r\n              <DetailsHome\r\n                release_date={release_date}\r\n                title={title}\r\n                vote_average={vote_average}\r\n                genres={genres}\r\n                runtime={runtime}\r\n                original_language={original_language}\r\n                resxProps={resxProps}\r\n                overview={overview}\r\n                id={id}\r\n                production_companies={production_companies}\r\n                sliderType={sliderType}\r\n                imdb_id={imdb_id}\r\n              />\r\n            )}\r\n            {actvTab === tabs.recommended && (\r\n              <RecommendedMoviesWrapper>\r\n                <RecommendedMoviesContainer>\r\n                  <React.Suspense fallback={<Loader />}>\r\n                    <Recommended\r\n                      id={id}\r\n                      relatedMediaType={RelatedMediaType.RECOMMENDED}\r\n                      type={\r\n                        sliderType === SliderType.movies\r\n                          ? MediaType.MOVIES\r\n                          : MediaType.TV\r\n                      }\r\n                    />\r\n                  </React.Suspense>\r\n                </RecommendedMoviesContainer>\r\n              </RecommendedMoviesWrapper>\r\n            )}\r\n            {actvTab === tabs.similar && (\r\n              <RecommendedMoviesWrapper>\r\n                <RecommendedMoviesContainer>\r\n                  <React.Suspense fallback={<Loader />}>\r\n                    <Similar\r\n                      id={id}\r\n                      relatedMediaType={RelatedMediaType.SIMILAR}\r\n                      type={\r\n                        sliderType === SliderType.movies\r\n                          ? MediaType.MOVIES\r\n                          : MediaType.TV\r\n                      }\r\n                    />\r\n                  </React.Suspense>\r\n                </RecommendedMoviesContainer>\r\n              </RecommendedMoviesWrapper>\r\n            )}\r\n            {actvTab === tabs.posters && (\r\n              <ReviewsWrapper resxProps={resxProps}>\r\n                <Images movieId={id} sliderType={sliderType} />\r\n              </ReviewsWrapper>\r\n            )}\r\n            {actvTab === tabs.reviews && (\r\n              <ReviewsWrapper resxProps={resxProps}>\r\n                <React.Suspense fallback={<div></div>}>\r\n                  <Reviews movieId={id} />\r\n                </React.Suspense>\r\n              </ReviewsWrapper>\r\n            )}\r\n            <PanelContainer>\r\n              <Panel onSelection={handleSelection} actvTab={actvTab} />\r\n            </PanelContainer>\r\n          </DetailsWrapper>\r\n        </>\r\n      )}\r\n      <CloseDetails onClick={handleClose} resxProps={resxProps}>\r\n        <CloseIcon color=\"#000\" />\r\n      </CloseDetails>\r\n    </DetailsCardWrapper>\r\n  );\r\n};\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-slider\\index.styles.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-slider\\collection.tsx",["423","424","425","426","427","428"],"import * as React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {ScrollLeft, ScrollRight, MoviesWrapper} from './collection.style';\r\nimport {CardSize} from '../../models/CardSize';\r\nimport {Movies as MoviesModel} from '../../models/Movies';\r\nimport {ChevronLeftIcon, ChevronRightIcon} from '../icons';\r\nimport Movie from '../../models/Media';\r\nimport {LoadingState as State} from '../../models/Slider';\r\nimport useVirtual from './../../effects/useVirtual';\r\nimport {Configs} from './../../effects/useVirtual';\r\nimport MoviesView from './movies';\r\nimport useResponsive from '../../effects/useResponsive';\r\nimport {MediaObject} from '../../models/MediaObject';\r\n\r\nexport enum NavDir {\r\n  LEFT = 'LEFT',\r\n  RIGHT = 'RIGHT',\r\n}\r\n\r\nexport default ({\r\n  items,\r\n  slider,\r\n  expandFull,\r\n  fetchMore,\r\n  totalResults,\r\n  loadingState,\r\n  onSelection,\r\n  showDetails,\r\n  selectedIndex,\r\n  id,\r\n}: MoviesModel) => {\r\n  const [movies, setMovies] = React.useState([] as Movie[]);\r\n  const [page, setPage] = React.useState(1);\r\n  const [actvStartIdx, setActvStartIdx] = React.useState(0);\r\n  const [loadingCards, setLoadingCards] = React.useState([] as number[]);\r\n  const [visibleColumns, setVisibleColumns] = React.useState(0);\r\n  const [lazyConfig, setLazyInputs] = useVirtual();\r\n  const [mounted, setMounted] = React.useState(false);\r\n  const resxProps = useResponsive();\r\n\r\n  const moviesRef = React.useRef<HTMLDivElement>(null);\r\n  const visibleItems = React.useRef(0);\r\n  const scrollButtonsPortal = document.getElementById(`slider-wrapper-${id}`);\r\n\r\n  const handleNav = (dir: NavDir) => {\r\n    const moveForward = dir === NavDir.RIGHT && loadingState !== State.LOADING;\r\n    const moveBackward = dir === NavDir.LEFT && page > 1;\r\n    const itemsLen = items.length;\r\n\r\n    const isFinalPage =\r\n      itemsLen === totalResults &&\r\n      itemsLen - actvStartIdx < visibleItems.current;\r\n\r\n    const columns =\r\n      expandFull && !showDetails ? visibleColumns * 2 : visibleColumns;\r\n    let newPage = 0;\r\n\r\n    if (moveForward && !isFinalPage) {\r\n      newPage = page + 1;\r\n    } else if (moveBackward) {\r\n      newPage = page - 1;\r\n    }\r\n\r\n    setPage(newPage);\r\n    setLazyInputs({\r\n      visibleElements: columns,\r\n      page: newPage,\r\n      totalItems: items.length,\r\n    });\r\n  };\r\n\r\n  // run it the first time\r\n  React.useEffect(() => {\r\n    const nativeElement = moviesRef.current;\r\n    if (nativeElement) {\r\n      const clientWidth = nativeElement.clientWidth;\r\n      let colWidth = 200;\r\n      if (resxProps) {\r\n        const {isBigScreen, isDesktopOrLaptop, isTabletOrMobile} = resxProps;\r\n\r\n        if (isTabletOrMobile) {\r\n          colWidth = 130;\r\n        } else if (isDesktopOrLaptop && !isBigScreen) {\r\n          colWidth = 150;\r\n        }\r\n      }\r\n      const columns = Math.floor(clientWidth / colWidth);\r\n      setVisibleColumns(columns);\r\n      visibleItems.current = expandFull && !showDetails ? columns * 2 : columns;\r\n    }\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (mounted) {\r\n      const {\r\n        itemsToShow,\r\n        itemsToHideLeft,\r\n        shouldLoadMore,\r\n        visibleElements,\r\n      } = lazyConfig as Configs;\r\n      if (visibleElements) {\r\n        let counter = 0;\r\n        const newItems = [...items];\r\n\r\n        // hide elements to the left of the window\r\n        for (let itr = 0; itr < itemsToHideLeft; itr++) {\r\n          newItems[counter++].hide = true;\r\n        }\r\n\r\n        setActvStartIdx(counter);\r\n\r\n        // show elements to be displayed in the window\r\n        for (let itr = 0; itr < itemsToShow; itr++) {\r\n          newItems[counter++].hide = false;\r\n        }\r\n\r\n        // hide all the elements to the right of the window\r\n        for (let itr = counter; itr < newItems.length; itr++) {\r\n          newItems[counter++].hide = true;\r\n        }\r\n\r\n        if (shouldLoadMore) {\r\n          const cards = Math.abs(newItems.length - page * visibleElements);\r\n          setLoadingCards(Array.from({length: cards}).map((k, i) => i));\r\n          setTimeout(() => fetchMore(), 0);\r\n        }\r\n        setMovies(newItems);\r\n      }\r\n    }\r\n  }, [lazyConfig]);\r\n\r\n  // monitor the actual data\r\n  React.useEffect(() => {\r\n    if (mounted) {\r\n      if (items.length) {\r\n        const nativeElement = moviesRef.current;\r\n        if (nativeElement) {\r\n          const clientWidth = nativeElement.clientWidth;\r\n          let colWidth = 200;\r\n          if (resxProps) {\r\n            const {\r\n              isBigScreen,\r\n              isDesktopOrLaptop,\r\n              isTabletOrMobile,\r\n            } = resxProps;\r\n\r\n            if (isTabletOrMobile) {\r\n              colWidth = 130;\r\n            } else if (isDesktopOrLaptop && !isBigScreen) {\r\n              colWidth = 150;\r\n            }\r\n          }\r\n\r\n          const cols = Math.floor(clientWidth / colWidth);\r\n          const columns = expandFull && !showDetails ? cols * 2 : cols;\r\n          setLazyInputs({\r\n            visibleElements: columns,\r\n            page,\r\n            totalItems: items.length,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }, [items]);\r\n\r\n  // monitor expand/collapse\r\n  React.useEffect(() => {\r\n    if (mounted) {\r\n      let newPage = null;\r\n      const columns =\r\n        expandFull && !showDetails ? visibleColumns * 2 : visibleColumns;\r\n\r\n      if (!showDetails) {\r\n        if (actvStartIdx > 0) {\r\n          newPage = Math.ceil((actvStartIdx + 1) / columns);\r\n          newPage = newPage ? newPage : 1;\r\n        } else {\r\n          newPage = 1;\r\n        }\r\n        setLazyInputs({\r\n          visibleElements: columns,\r\n          page: newPage,\r\n          totalItems: items.length,\r\n        });\r\n      } else {\r\n        const itemIndex = movies.findIndex((m) => m.id === selectedIndex);\r\n        newPage = Math.ceil((itemIndex + 1) / columns);\r\n        setLazyInputs({\r\n          visibleElements: columns,\r\n          page: newPage,\r\n          totalItems: items.length,\r\n        });\r\n      }\r\n      setPage(newPage);\r\n    }\r\n  }, [expandFull, showDetails]);\r\n\r\n  React.useEffect(() => {\r\n    if (mounted) {\r\n      if (loadingState === State.LOADED || loadingState === State.FAILED) {\r\n        setLoadingCards([]);\r\n      }\r\n    }\r\n  }, [loadingState]);\r\n\r\n  const handleSelection = (m: MediaObject) => {\r\n    // make a quick copy\r\n    const newMovies = [...movies];\r\n\r\n    // get to be selected item\r\n    const newSelection = newMovies.find((movie) => movie.id === m.id);\r\n\r\n    onSelection(newSelection);\r\n  };\r\n\r\n  return (\r\n    <MoviesWrapper ref={moviesRef}>\r\n      {scrollButtonsPortal &&\r\n        ReactDOM.createPortal(\r\n          <ScrollLeft\r\n            onClick={() => handleNav(NavDir.LEFT)}\r\n            loading={loadingState === State.LOADING}\r\n            resxProps={resxProps}\r\n          >\r\n            <ChevronLeftIcon color=\"#fff\" />\r\n          </ScrollLeft>,\r\n          scrollButtonsPortal\r\n        )}\r\n      {scrollButtonsPortal &&\r\n        ReactDOM.createPortal(\r\n          <ScrollRight\r\n            onClick={() => handleNav(NavDir.RIGHT)}\r\n            loading={loadingState === State.LOADING}\r\n            resxProps={resxProps}\r\n          >\r\n            <ChevronRightIcon color=\"#fff\" />\r\n          </ScrollRight>,\r\n          scrollButtonsPortal\r\n        )}\r\n      {movies && movies.length ? (\r\n        <MoviesView\r\n          slider={slider}\r\n          expandFull={expandFull}\r\n          size={CardSize.small}\r\n          columns={visibleColumns}\r\n          movies={movies}\r\n          handleSelection={handleSelection}\r\n          loadingCards={loadingCards}\r\n          id={`${id}`}\r\n        />\r\n      ) : null}\r\n    </MoviesWrapper>\r\n  );\r\n};\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\commons\\styles.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\HOCS\\withExtendInfo.styles.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-loader\\index.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-modal\\media-modal.styles.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-objects\\media-object.tsx",["429"],"import React from 'react';\r\nimport {\r\n  MediaObject,\r\n  ObjectImage,\r\n  FallbackImage,\r\n  ImageContainer,\r\n  ImageInfo,\r\n} from './media-object.style';\r\nimport {config, useTransition} from 'react-spring';\r\nimport {\r\n  MediaObject as MediaObjectModel,\r\n  ThumbnailSize,\r\n} from '../../models/MediaObject';\r\n\r\nimport {UserIcon} from './../icons/index';\r\nimport useResponsive from '../../effects/useResponsive';\r\n\r\nconst MediaObjectView: React.FunctionComponent<MediaObjectModel> = React.memo(\r\n  ({\r\n    hideObjectWithNoImage,\r\n    id,\r\n    name,\r\n    noTitle,\r\n    onSelect,\r\n    path,\r\n    thumbnailSize,\r\n  }) => {\r\n    const resx = useResponsive();\r\n    const imageUrl = `https://image.tmdb.org/t/p/${\r\n      thumbnailSize === ThumbnailSize.large ? 'w500' : 'w200'\r\n    }/${path}`;\r\n    const [loadState, setLoadState] = React.useState({\r\n      loaded: false,\r\n      failed: false,\r\n      default: true,\r\n    });\r\n    const [infoWidth, setInfoWidth] = React.useState(0);\r\n    const ref = React.useRef<HTMLElement & HTMLImageElement>(null);\r\n\r\n    React.useEffect(() => {\r\n      if (!noTitle) {\r\n        setTimeout(() => {\r\n          if (loadState.loaded && ref.current) {\r\n            setInfoWidth(ref.current?.width);\r\n          } else if (loadState.failed && ref.current) {\r\n            setInfoWidth(ref.current?.clientWidth);\r\n          }\r\n        }, 0);\r\n      }\r\n    }, [loadState, noTitle]);\r\n\r\n    const transition = useTransition(loadState.loaded, null, {\r\n      initial: {\r\n        opacity: 0,\r\n        transform: 'scale(0)',\r\n      },\r\n      enter: {\r\n        opacity: 1,\r\n        transform: 'scale(1)',\r\n      },\r\n      leave: {\r\n        opacity: 0,\r\n        transform: 'scale(0)',\r\n      },\r\n      config: config.stiff,\r\n      unique: true,\r\n    });\r\n\r\n    const canShow = hideObjectWithNoImage\r\n      ? hideObjectWithNoImage && path\r\n      : !hideObjectWithNoImage;\r\n\r\n    return canShow ? (\r\n      <MediaObject onClick={() => onSelect && onSelect({name, id})}>\r\n        <ImageContainer noTitle={noTitle ? 1 : 0}>\r\n          <img\r\n            src={imageUrl}\r\n            onLoad={() =>\r\n              setLoadState({loaded: true, failed: false, default: false})\r\n            }\r\n            onError={() =>\r\n              setLoadState({loaded: false, failed: true, default: false})\r\n            }\r\n            style={{display: 'none'}}\r\n          />\r\n\r\n          {transition.map(({item, key, props}) => {\r\n            if (item) {\r\n              return (\r\n                <ObjectImage\r\n                  src={imageUrl}\r\n                  loaded={loadState.loaded ? 1 : 0}\r\n                  style={props}\r\n                  noTitle={noTitle ? 1 : 0}\r\n                  ref={ref}\r\n                  key={key}\r\n                  alt={name}\r\n                  loading=\"lazy\"\r\n                ></ObjectImage>\r\n              );\r\n            } else {\r\n              if (loadState.failed) {\r\n                return (\r\n                  <FallbackImage key={key} ref={ref}>\r\n                    <UserIcon color=\"#ccc\" />\r\n                  </FallbackImage>\r\n                );\r\n              } else {\r\n                return null;\r\n              }\r\n            }\r\n          })}\r\n        </ImageContainer>\r\n        {!noTitle && (\r\n          <ImageInfo resx={resx} width={infoWidth}>\r\n            {`${name}`}\r\n          </ImageInfo>\r\n        )}\r\n      </MediaObject>\r\n    ) : null;\r\n  },\r\n  (prev, current) => prev.id === current.id\r\n);\r\n\r\nexport default MediaObjectView;\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\models\\CardSize.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-card\\card-extended.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\details-main.styles.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-card\\card.style.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-objects\\media-grid.style.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\details\\reviews.tsx",["430"],"import React from 'react';\r\nimport { useApolloClient } from '@apollo/client';\r\nimport reviewsQuery from '../../gqls/reviews';\r\nimport Loader from '../../components/media-loader';\r\nimport Review from '../../models/Review';\r\nimport Reviews from '../../components/media-details/reviews/details-reviews';\r\n\r\ninterface MovieResultDetails {\r\n  getReviews: ReviewResultModel;\r\n}\r\n\r\ninterface ReviewResultModel {\r\n  total_results: number;\r\n  results: Review[];\r\n  id: number | string;\r\n}\r\n\r\nconst MovieDetails: React.FunctionComponent<{\r\n  movieId: number | string;\r\n}> = React.memo(\r\n  ({ movieId }) => {\r\n    const [data, setData] = React.useState<ReviewResultModel | null>();\r\n    const [loading, setLoading] = React.useState(false);\r\n\r\n    const client = useApolloClient();\r\n\r\n    React.useEffect(() => {\r\n      if (movieId) {\r\n        executeQuery();\r\n      } else {\r\n        setData(null);\r\n      }\r\n    }, [movieId]);\r\n\r\n    const executeQuery = async () => {\r\n      setLoading(true);\r\n\r\n      const { data } = await client.query<MovieResultDetails>({\r\n        query: reviewsQuery,\r\n        variables: {\r\n          page: 1,\r\n          movie_id: movieId,\r\n        },\r\n      });\r\n\r\n      if (data) {\r\n        setData(data.getReviews);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n\r\n    let view;\r\n\r\n    if (!loading && data && data.id) {\r\n      view = <Reviews items={data.results} id={movieId} />;\r\n    } else {\r\n      view = <Loader />;\r\n    }\r\n\r\n    return view;\r\n  },\r\n  (prev, current) => prev.movieId === current.movieId\r\n);\r\n\r\nexport default MovieDetails;\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-poster\\poster.tsx",["431"],"import * as React from 'react';\r\nimport {Poster} from '../../models/Poster';\r\nimport {\r\n  PosterWrapper,\r\n  CardImage,\r\n  CardImageWrapper,\r\n  Star,\r\n} from './poster-styles';\r\nimport {MedalIcon} from '../icons';\r\nimport useResponsive from '../../effects/useResponsive';\r\n\r\nexport default React.memo(\r\n  ({poster_path, size, title, rating}: Poster) => {\r\n    const resx = useResponsive();\r\n    const [loaded, setLoaded] = React.useState(false);\r\n    const src = `https://image.tmdb.org/t/p/w${size}/${poster_path}`;\r\n\r\n    return (\r\n      <PosterWrapper size={size}>\r\n        {poster_path && (\r\n          <CardImageWrapper selected={false}>\r\n            <img\r\n              style={{display: 'none'}}\r\n              src={src}\r\n              onLoad={() => setLoaded(true)}\r\n            />\r\n            {loaded && (\r\n              <CardImage\r\n                title=\"\"\r\n                alt={title}\r\n                src={src}\r\n                loading=\"lazy\"\r\n              ></CardImage>\r\n            )}\r\n            {loaded && rating && rating > 8 ? (\r\n              <Star resx={resx}>\r\n                <MedalIcon color=\"#ffd700\" />\r\n              </Star>\r\n            ) : null}\r\n          </CardImageWrapper>\r\n        )}\r\n      </PosterWrapper>\r\n    );\r\n  },\r\n  (prev, cur) => prev.id === cur.id\r\n);\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\details\\images.tsx",["432"],"import { useApolloClient } from '@apollo/client';\r\nimport React from 'react';\r\nimport MediaObjects from '../../components/media-objects/media-objects';\r\nimport useResponsive from '../../effects/useResponsive';\r\nimport { images, tvImages } from '../../gqls/images';\r\nimport { Images } from '../../models/Images';\r\nimport { SliderType } from '../../models/Slider';\r\nimport { MediaObject, ThumbnailSize } from './../../models/MediaObject';\r\nimport emotion from '@emotion/styled';\r\n\r\ninterface ImageResultDetails {\r\n  getImages: Images;\r\n  getTvImages: Images;\r\n}\r\n\r\ninterface ImagesModel {\r\n  movieId?: number | string;\r\n  sliderType: SliderType;\r\n}\r\n\r\nconst MediaObjectsWrapper = emotion.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 97%;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst ImagesView: React.FunctionComponent<ImagesModel> = React.memo(\r\n  ({ movieId, sliderType }) => {\r\n    const client = useApolloClient();\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [detailsData, setDetailsData] = React.useState<Images>();\r\n    const { isBigScreen } = useResponsive();\r\n    const executeQuery = async () => {\r\n      setLoading(true);\r\n      const { data } = await client.query<ImageResultDetails>({\r\n        query: sliderType === SliderType.movies ? images : tvImages,\r\n        variables: {\r\n          lang: 'en-US',\r\n          movie_id: movieId,\r\n        },\r\n        fetchPolicy: 'cache-first',\r\n      });\r\n      if (data) {\r\n        const _data =\r\n          sliderType === SliderType.movies ? data.getImages : data.getTvImages;\r\n        setDetailsData(_data);\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n      if (movieId) {\r\n        executeQuery();\r\n      }\r\n    }, [movieId]);\r\n\r\n    let view: any = null;\r\n\r\n    if (!loading && detailsData && detailsData.id) {\r\n      const { backdrops } = detailsData;\r\n      view = (\r\n        <>\r\n          {backdrops && backdrops.length ? (\r\n            <MediaObjectsWrapper>\r\n              <MediaObjects\r\n                noTitle\r\n                id=\"movie_backdrops\"\r\n                items={backdrops.map<MediaObject>(({ file_path }) => ({\r\n                  name: '',\r\n                  path: file_path,\r\n                  id: file_path,\r\n                }))}\r\n                height={isBigScreen ? 370 : 280}\r\n                itemSize={isBigScreen ? 500 : 380}\r\n                thumbnailSize={ThumbnailSize.large}\r\n                showExpand\r\n              />\r\n            </MediaObjectsWrapper>\r\n          ) : null}\r\n        </>\r\n      );\r\n    }\r\n    return <>{view}</>;\r\n  },\r\n  (prev, current) => prev.movieId === current.movieId\r\n);\r\n\r\nexport default ImagesView;\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\panel\\panel.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\home\\details-home.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\effects\\useVirtual.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-slider\\movies.tsx",["433"],"import React from 'react';\r\nimport {CardSize} from '../../models/CardSize';\r\nimport Movie from '../../models/Media';\r\nimport {MoviesContainer} from './movies.style';\r\nimport Card from '../media-card/card';\r\nimport useResponsive from '../../effects/useResponsive';\r\nimport withExtendedInfo, {CardExtendCustomModel} from '../HOCS/withExtendInfo';\r\nimport {PositioningStrategy} from '../media-card/card-extended';\r\nimport {MediaObject} from '../../models/MediaObject';\r\n\r\nconst ExtendedCard = withExtendedInfo<CardExtendCustomModel>(Card);\r\n\r\nexport interface Movies {\r\n  slider?: number;\r\n  expandFull?: number;\r\n  size: CardSize;\r\n  columns: number;\r\n  movies: Movie[];\r\n  loadingCards: number[];\r\n  handleSelection: (m: MediaObject) => void;\r\n  id?: string;\r\n}\r\n\r\nexport default ({\r\n  slider,\r\n  expandFull,\r\n  size,\r\n  columns,\r\n  movies,\r\n  loadingCards,\r\n  handleSelection,\r\n  id: containerId,\r\n}: Movies) => {\r\n  const responsiveProps = useResponsive();\r\n  return (\r\n    <MoviesContainer\r\n      slider={slider ? 1 : 0}\r\n      expandFull={expandFull ? 1 : 0}\r\n      size={CardSize.small}\r\n      columns={columns}\r\n      resxProps={responsiveProps}\r\n    >\r\n      {movies.map(\r\n        (\r\n          {\r\n            id,\r\n            poster_path,\r\n            selected,\r\n            title,\r\n            release_date,\r\n            vote_average,\r\n            hide,\r\n            overview,\r\n            genres,\r\n          },\r\n          index\r\n        ) =>\r\n          !hide && (\r\n            <ExtendedCard\r\n              poster_path={poster_path}\r\n              selected={selected}\r\n              key={`${id}-${release_date}`}\r\n              onSelect={handleSelection}\r\n              size={CardSize.small}\r\n              id={id}\r\n              title={title}\r\n              release_date={release_date}\r\n              vote_average={vote_average}\r\n              index={index}\r\n              overview={overview}\r\n              resxProps={responsiveProps}\r\n              genres={genres}\r\n              containerId={containerId}\r\n              positioningStrategy={PositioningStrategy.absolute}\r\n            />\r\n          )\r\n      )}\r\n      {loadingCards && loadingCards.length\r\n        ? loadingCards.map((val: number) => (\r\n            <Card\r\n              id={val}\r\n              loadingCard={true}\r\n              key={val}\r\n              poster_path={''}\r\n              resxProps={responsiveProps}\r\n            />\r\n          ))\r\n        : null}\r\n    </MoviesContainer>\r\n  );\r\n};\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-objects\\media-object.style.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-card\\card-extended.styles.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-slider\\collection.style.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\gqls\\reviews.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-poster\\poster-styles.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\related\\index.tsx",["434"],"import React from 'react';\r\nimport { useApolloClient, DocumentNode } from '@apollo/client';\r\nimport { recommended, similar } from '../../gqls/movies';\r\nimport { recommendedTv, similarTv } from '../../gqls/tv';\r\nimport Movie from '../../models/Media';\r\nimport { MediaObject } from '../../models/MediaObject';\r\nimport MediaRelated from '../../components/media-related/media-related';\r\nimport { MediaType, RelatedMediaType } from '../models';\r\n\r\nconst getQuery: (t: MediaType, relType: RelatedMediaType) => DocumentNode = (\r\n  type,\r\n  relType\r\n) => {\r\n  switch (type) {\r\n    case MediaType.MOVIES:\r\n      return relType === RelatedMediaType.RECOMMENDED ? recommended : similar;\r\n    case MediaType.TV:\r\n      return relType === RelatedMediaType.RECOMMENDED\r\n        ? recommendedTv\r\n        : similarTv;\r\n  }\r\n};\r\n\r\nexport interface RelatedMediaModel {\r\n  type: MediaType;\r\n  relatedMediaType: RelatedMediaType;\r\n  id: number | string;\r\n  title?: string;\r\n}\r\n\r\nconst RelatedMedia: React.FunctionComponent<RelatedMediaModel> = React.memo(\r\n  ({ id, type, relatedMediaType, title }) => {\r\n    const client = useApolloClient();\r\n    const [movieData, setMovieData] = React.useState<{\r\n      results: Movie[];\r\n      total_results?: number;\r\n    }>({\r\n      results: [],\r\n      total_results: 0,\r\n    });\r\n    const [loading, setLoading] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n      executeQuery();\r\n    }, []);\r\n\r\n    const executeQuery = async () => {\r\n      setLoading(true);\r\n      const { data } = await client.query({\r\n        query: getQuery(type, relatedMediaType),\r\n        variables: {\r\n          lang: 'en-US',\r\n          id: id,\r\n          page: 1,\r\n        },\r\n      });\r\n      if (data) {\r\n        let newData = [] as Movie[];\r\n        if (movieData.results) {\r\n          let newResults = [];\r\n          if (relatedMediaType === RelatedMediaType.SIMILAR) {\r\n            newResults =\r\n              type === MediaType.MOVIES ? data.getSimilar : data.getTvSimilar;\r\n          } else if (relatedMediaType === RelatedMediaType.RECOMMENDED) {\r\n            newResults =\r\n              type === MediaType.MOVIES\r\n                ? data.getRecommendations\r\n                : data.getTvRecommendations;\r\n          }\r\n          newData = [...movieData.results, ...newResults.results];\r\n          setMovieData({\r\n            results: newData,\r\n            total_results: newResults.total_results,\r\n          });\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    let view = null;\r\n\r\n    if (loading) {\r\n      // view = <Loader size={LoaderSize.large} />;\r\n    } else if (movieData && movieData.results.length) {\r\n      const data: MediaObject[] = movieData.results.map(\r\n        ({\r\n          original_title,\r\n          poster_path,\r\n          id,\r\n          release_date,\r\n          overview,\r\n          vote_average,\r\n          original_name,\r\n          first_air_date,\r\n        }) => ({\r\n          id: id,\r\n          name: original_title || original_name || '',\r\n          overview,\r\n          path: poster_path || '',\r\n          release_date: release_date || first_air_date || '',\r\n          visible: false,\r\n          vote_average,\r\n        })\r\n      );\r\n      view = <MediaRelated items={data} id={id} title={title} />;\r\n    }\r\n\r\n    return <div style={{ height: '100%', position: 'relative' }}>{view}</div>;\r\n  },\r\n  (prev, cur) => prev.id === cur.id\r\n);\r\n\r\nexport default RelatedMedia;\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-rating\\media-rating.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\gqls\\images.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\panel\\panel.style.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\home\\details-home.styles.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\reviews\\details-reviews.tsx",["435"],"import React from \"react\";\r\nimport ReviewModel from \"../../../models/Review\";\r\nimport {\r\n  ReviewsWrapper,\r\n  ReviewsContainer,\r\n  ReviewsHeader,\r\n} from \"./details-reviews.style\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport Review from \"./details-review\";\r\nimport { useSpring } from \"react-spring\";\r\n\r\ninterface ReviewsModel {\r\n  items: ReviewModel[];\r\n  id?: number | string;\r\n}\r\n\r\nconst Reviews: React.FunctionComponent<ReviewsModel> = React.memo(\r\n  ({ items }) => {\r\n    const props = useSpring({\r\n      opacity: 1,\r\n      from: {\r\n        opacity: 0\r\n      }\r\n    })\r\n    return (\r\n      <ReviewsContainer style={props}>\r\n        {/* <ReviewsHeader>Reviews</ReviewsHeader> */}\r\n        <Scrollbars>\r\n          <ReviewsWrapper>\r\n            {items.map(({ content, author, id }, index) => {\r\n              return (\r\n                <Review\r\n                  content={content}\r\n                  author={author}\r\n                  id={id}\r\n                  key={id}\r\n                  index={index}\r\n                />\r\n              );\r\n            })}\r\n          </ReviewsWrapper>\r\n        </Scrollbars>\r\n      </ReviewsContainer>\r\n    );\r\n  },\r\n  (prev, cur) => prev.id === cur.id\r\n);\r\n\r\nexport default Reviews;\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\details-cast-and-crew.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\title\\details-title.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\production\\details-production.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-slider\\movies.style.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-rating\\media-rating.style.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\reviews\\details-reviews.style.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-related\\media-related.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\details-cast-and-crew.styles.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\reviews\\details-review.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\title\\details-title.style.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\production\\details-production.styles..ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\containers\\details\\castDetails.tsx",["436"],"import { useApolloClient } from '@apollo/client';\r\nimport React from 'react';\r\nimport MediaObjects from '../../components/media-objects/media-objects';\r\nimport useResponsive, { responsiveProps } from '../../effects/useResponsive';\r\nimport { cast, tvCast } from '../../gqls/cast';\r\nimport { Credits } from '../../models/Credits';\r\nimport { SliderType } from '../../models/Slider';\r\nimport { MediaObject, ThumbnailSize } from './../../models/MediaObject';\r\nimport emotion from '@emotion/styled';\r\n\r\ninterface CastResultDetails {\r\n  getCredits: Credits;\r\n  getTvCredits: Credits;\r\n}\r\n\r\ninterface CastAndCrewModel {\r\n  movieId?: number | string;\r\n  title?: string;\r\n  isCast?: boolean;\r\n  sliderType?: SliderType;\r\n}\r\n\r\nconst MediaObjectsWrapper = emotion.div<{ resxProps?: responsiveProps }>`\r\n  margin-bottom: 2rem;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  justify-content: flex-start;\r\n  width: ${({ resxProps: st }) =>\r\n    (st && st.isBigScreen) || st?.isTabletOrMobile ? '97%' : '48%'};\r\n`;\r\n\r\nconst CastAndCrew: React.FunctionComponent<CastAndCrewModel> = React.memo(\r\n  ({ movieId, sliderType }) => {\r\n    const client = useApolloClient();\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [detailsData, setDetailsData] = React.useState<Credits>({ id: '' });\r\n    const resxProps = useResponsive();\r\n    const { isBigScreen } = resxProps;\r\n\r\n    const executeQuery = async () => {\r\n      setLoading(true);\r\n      const { data } = await client.query<CastResultDetails>({\r\n        query: sliderType === SliderType.movies ? cast : tvCast,\r\n        variables: {\r\n          lang: 'en-US',\r\n          movie_id: movieId,\r\n        },\r\n        fetchPolicy: 'cache-first',\r\n      });\r\n\r\n      if (data) {\r\n        const _data =\r\n          sliderType === SliderType.movies\r\n            ? data.getCredits\r\n            : data.getTvCredits;\r\n        setDetailsData(_data);\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n      if (movieId) {\r\n        executeQuery();\r\n      }\r\n    }, [movieId]);\r\n\r\n    let view: any = null;\r\n\r\n    if (!loading && detailsData.id) {\r\n      const { crew, cast, id } = detailsData;\r\n      view = (\r\n        <>\r\n          {cast && cast.length ? (\r\n            <MediaObjectsWrapper resxProps={resxProps}>\r\n              <MediaObjects\r\n                title={'Movie Cast'}\r\n                id={+id}\r\n                items={cast\r\n                  .map<MediaObject>(\r\n                    ({ name, profile_path, id, character, order }) => ({\r\n                      name: name,\r\n                      path: profile_path,\r\n                      id,\r\n                      info: character,\r\n                      order,\r\n                    })\r\n                  )\r\n                  .sort((a, b) => {\r\n                    if (a.order && b.order) {\r\n                      return a.order - b.order;\r\n                    } else {\r\n                      return 0;\r\n                    }\r\n                  })}\r\n                height={isBigScreen ? 260 : 220}\r\n                itemSize={isBigScreen ? 180 : 140}\r\n                thumbnailSize={ThumbnailSize.small}\r\n                showExpand\r\n              />\r\n            </MediaObjectsWrapper>\r\n          ) : null}\r\n          {crew && crew.length ? (\r\n            <MediaObjectsWrapper resxProps={resxProps}>\r\n              <MediaObjects\r\n                title={'Movie Crew'}\r\n                id={+id}\r\n                items={crew.map<MediaObject>(\r\n                  ({ name, profile_path, id, job }) => ({\r\n                    name: name,\r\n                    path: profile_path,\r\n                    id,\r\n                    info: job,\r\n                  })\r\n                )}\r\n                height={isBigScreen ? 260 : 220}\r\n                itemSize={isBigScreen ? 180 : 140}\r\n                thumbnailSize={ThumbnailSize.small}\r\n                showExpand\r\n              />\r\n            </MediaObjectsWrapper>\r\n          ) : null}\r\n        </>\r\n      );\r\n    }\r\n    return <>{view}</>;\r\n  },\r\n  (prev, current) => prev.movieId === current.movieId\r\n);\r\n\r\nexport default CastAndCrew;\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-genres\\genres.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\attribute\\details-attribute.tsx",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\media-imdb-link\\media-imdb-link.tsx",["437"],"import React from 'react';\r\nimport {ImdbLinkWrapper, ImdbLink} from './media-imdb-link.styles';\r\nimport {ExternalIcon} from '../../icons';\r\n\r\nconst MediaImdbLink: React.FunctionComponent<{id: string}> = ({id}) => (\r\n  <ImdbLinkWrapper>\r\n    <ImdbLink href={`https://imdb.com/title/${id}`} target=\"_new\">\r\n      {/* <ExternalIcon color=\"#fff\"/> */}\r\n      <span>IMDB</span>\r\n    </ImdbLink>\r\n  </ImdbLinkWrapper>\r\n);\r\n\r\nexport default MediaImdbLink;\r\n","D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-related\\media-related.styles.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\reviews\\details-review.style.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\gqls\\cast.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-genres\\genres-styles.ts",[],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\media-imdb-link\\media-imdb-link.styles.ts",[],["438","439"],"D:\\Projects\\2020\\flixmov\\ui\\src\\components\\media-details\\attribute\\details-attribute.style.ts",[],{"ruleId":"440","replacedBy":"441"},{"ruleId":"442","replacedBy":"443"},{"ruleId":"440","replacedBy":"441"},{"ruleId":"442","replacedBy":"443"},{"ruleId":"444","severity":1,"message":"445","line":6,"column":1,"nodeType":"446","endLine":19,"endColumn":3},{"ruleId":"444","severity":1,"message":"445","line":5,"column":1,"nodeType":"446","endLine":19,"endColumn":3},{"ruleId":"447","severity":1,"message":"448","line":8,"column":41,"nodeType":"449","messageId":"450","endLine":8,"endColumn":52},{"ruleId":"451","severity":1,"message":"452","line":45,"column":6,"nodeType":"453","endLine":45,"endColumn":8,"suggestions":"454"},{"ruleId":"451","severity":1,"message":"455","line":28,"column":6,"nodeType":"453","endLine":28,"endColumn":18,"suggestions":"456"},{"ruleId":"451","severity":1,"message":"457","line":72,"column":6,"nodeType":"453","endLine":72,"endColumn":8,"suggestions":"458"},{"ruleId":"451","severity":1,"message":"459","line":45,"column":6,"nodeType":"453","endLine":45,"endColumn":8,"suggestions":"460"},{"ruleId":"451","severity":1,"message":"461","line":40,"column":6,"nodeType":"453","endLine":40,"endColumn":8,"suggestions":"462"},{"ruleId":"451","severity":1,"message":"463","line":63,"column":8,"nodeType":"453","endLine":63,"endColumn":15,"suggestions":"464"},{"ruleId":"447","severity":1,"message":"465","line":96,"column":11,"nodeType":"449","messageId":"450","endLine":96,"endColumn":26},{"ruleId":"451","severity":1,"message":"466","line":62,"column":6,"nodeType":"453","endLine":62,"endColumn":15,"suggestions":"467"},{"ruleId":"451","severity":1,"message":"468","line":73,"column":6,"nodeType":"453","endLine":73,"endColumn":12,"suggestions":"469"},{"ruleId":"451","severity":1,"message":"466","line":62,"column":6,"nodeType":"453","endLine":62,"endColumn":15,"suggestions":"470"},{"ruleId":"451","severity":1,"message":"468","line":73,"column":6,"nodeType":"453","endLine":73,"endColumn":12,"suggestions":"471"},{"ruleId":"447","severity":1,"message":"472","line":29,"column":7,"nodeType":"449","messageId":"450","endLine":29,"endColumn":19},{"ruleId":"451","severity":1,"message":"473","line":116,"column":8,"nodeType":"453","endLine":116,"endColumn":10,"suggestions":"474"},{"ruleId":"447","severity":1,"message":"475","line":16,"column":3,"nodeType":"449","messageId":"450","endLine":16,"endColumn":17},{"ruleId":"447","severity":1,"message":"476","line":17,"column":3,"nodeType":"449","messageId":"450","endLine":17,"endColumn":18},{"ruleId":"451","severity":1,"message":"477","line":96,"column":6,"nodeType":"453","endLine":96,"endColumn":41,"suggestions":"478"},{"ruleId":"451","severity":1,"message":"479","line":45,"column":6,"nodeType":"453","endLine":45,"endColumn":8,"suggestions":"480"},{"ruleId":"447","severity":1,"message":"481","line":13,"column":9,"nodeType":"449","messageId":"450","endLine":13,"endColumn":13},{"ruleId":"451","severity":1,"message":"482","line":44,"column":7,"nodeType":"453","endLine":44,"endColumn":11,"suggestions":"483"},{"ruleId":"444","severity":1,"message":"484","line":24,"column":1,"nodeType":"446","endLine":190,"endColumn":2},{"ruleId":"447","severity":1,"message":"485","line":72,"column":11,"nodeType":"449","messageId":"450","endLine":72,"endColumn":24},{"ruleId":"447","severity":1,"message":"486","line":8,"column":20,"nodeType":"449","messageId":"450","endLine":8,"endColumn":28},{"ruleId":"444","severity":1,"message":"445","line":32,"column":1,"nodeType":"446","endLine":150,"endColumn":3},{"ruleId":"451","severity":1,"message":"487","line":61,"column":6,"nodeType":"453","endLine":61,"endColumn":12,"suggestions":"488"},{"ruleId":"451","severity":1,"message":"489","line":70,"column":6,"nodeType":"453","endLine":70,"endColumn":8,"suggestions":"490"},{"ruleId":"444","severity":1,"message":"445","line":20,"column":1,"nodeType":"446","endLine":255,"endColumn":3},{"ruleId":"451","severity":1,"message":"491","line":92,"column":6,"nodeType":"453","endLine":92,"endColumn":8,"suggestions":"492"},{"ruleId":"451","severity":1,"message":"493","line":131,"column":6,"nodeType":"453","endLine":131,"endColumn":18,"suggestions":"494"},{"ruleId":"451","severity":1,"message":"495","line":165,"column":6,"nodeType":"453","endLine":165,"endColumn":13,"suggestions":"496"},{"ruleId":"451","severity":1,"message":"497","line":197,"column":6,"nodeType":"453","endLine":197,"endColumn":31,"suggestions":"498"},{"ruleId":"451","severity":1,"message":"487","line":205,"column":6,"nodeType":"453","endLine":205,"endColumn":20,"suggestions":"499"},{"ruleId":"500","severity":1,"message":"501","line":76,"column":11,"nodeType":"502","endLine":85,"endColumn":13},{"ruleId":"451","severity":1,"message":"503","line":33,"column":8,"nodeType":"453","endLine":33,"endColumn":17,"suggestions":"504"},{"ruleId":"500","severity":1,"message":"501","line":22,"column":13,"nodeType":"502","endLine":26,"endColumn":15},{"ruleId":"451","severity":1,"message":"503","line":56,"column":8,"nodeType":"453","endLine":56,"endColumn":17,"suggestions":"505"},{"ruleId":"444","severity":1,"message":"445","line":24,"column":1,"nodeType":"446","endLine":91,"endColumn":3},{"ruleId":"451","severity":1,"message":"503","line":45,"column":8,"nodeType":"453","endLine":45,"endColumn":10,"suggestions":"506"},{"ruleId":"447","severity":1,"message":"507","line":6,"column":3,"nodeType":"449","messageId":"450","endLine":6,"endColumn":16},{"ruleId":"451","severity":1,"message":"503","line":68,"column":8,"nodeType":"453","endLine":68,"endColumn":17,"suggestions":"508"},{"ruleId":"447","severity":1,"message":"509","line":3,"column":9,"nodeType":"449","messageId":"450","endLine":3,"endColumn":21},{"ruleId":"440","replacedBy":"510"},{"ruleId":"442","replacedBy":"511"},"no-native-reassign",["512"],"no-negated-in-lhs",["513"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'CompassIcon' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'location.pathname' and 'options'. Either include them or remove the dependency array.","ArrayExpression",["514"],"React Hook React.useEffect has a missing dependency: 'onSearch'. Either include it or remove the dependency array. If 'onSearch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["515"],"React Hook React.useEffect has missing dependencies: 'opts.items' and 'setProps'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setOpts' needs the current value of 'opts.items'.",["516"],"React Hook React.useEffect has a missing dependency: 'getTv'. Either include it or remove the dependency array.",["517"],"React Hook React.useEffect has a missing dependency: 'getMovies'. Either include it or remove the dependency array.",["518"],"React Hook React.useEffect has a missing dependency: 'getResults'. Either include it or remove the dependency array.",["519"],"'handleFetchMore' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'executeQuery', 'mounted', 'resxProps', and 'setProps'. Either include them or remove the dependency array.",["520"],"React Hook React.useEffect has missing dependencies: 'mounted', 'resxProps', and 'setProps'. Either include them or remove the dependency array.",["521"],["522"],["523"],"'ExtendedCard' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'containerRef', 'hideObjectsWithNoImage', and 'items'. Either include them or remove the dependency array. If 'setConfig' needs the current value of 'hideObjectsWithNoImage', you can also switch to useReducer instead of useState and read 'hideObjectsWithNoImage' in the reducer.",["524"],"'PlusCircleIcon' is defined but never used.","'MinusCircleIcon' is defined but never used.","React Hook React.useEffect has missing dependencies: 'resxProps' and 'setProps'. Either include them or remove the dependency array.",["525"],"React Hook React.useEffect has missing dependencies: 'itemWidth' and 'items.length'. Either include them or remove the dependency array. If 'setConfig' needs the current value of 'itemWidth', you can also switch to useReducer instead of useState and read 'itemWidth' in the reducer.",["526"],"'atom' is defined but never used.","React Hook React.useCallback has missing dependencies: 'onSelect' and 'title'. Either include them or remove the dependency array. If 'onSelect' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["527"],"Unexpected default export of anonymous function","'timer' is defined but never used.","'MenuIcon' is defined but never used.","React Hook React.useEffect has a missing dependency: 'mounted'. Either include it or remove the dependency array.",["528"],"React Hook React.useCallback has a missing dependency: 'togglePanel'. Either include it or remove the dependency array.",["529"],"React Hook React.useEffect has missing dependencies: 'expandFull', 'resxProps', and 'showDetails'. Either include them or remove the dependency array.",["530"],"React Hook React.useEffect has missing dependencies: 'fetchMore', 'items', 'mounted', and 'page'. Either include them or remove the dependency array. If 'fetchMore' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["531"],"React Hook React.useEffect has missing dependencies: 'expandFull', 'mounted', 'page', 'resxProps', 'setLazyInputs', and 'showDetails'. Either include them or remove the dependency array.",["532"],"React Hook React.useEffect has missing dependencies: 'actvStartIdx', 'items.length', 'mounted', 'movies', 'selectedIndex', 'setLazyInputs', and 'visibleColumns'. Either include them or remove the dependency array.",["533"],["534"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook React.useEffect has a missing dependency: 'executeQuery'. Either include it or remove the dependency array.",["535"],["536"],["537"],"'ReviewsHeader' is defined but never used.",["538"],"'ExternalIcon' is defined but never used.",["512"],["513"],"no-global-assign","no-unsafe-negation",{"desc":"539","fix":"540"},{"desc":"541","fix":"542"},{"desc":"543","fix":"544"},{"desc":"545","fix":"546"},{"desc":"547","fix":"548"},{"desc":"549","fix":"550"},{"desc":"551","fix":"552"},{"desc":"553","fix":"554"},{"desc":"551","fix":"555"},{"desc":"553","fix":"556"},{"desc":"557","fix":"558"},{"desc":"559","fix":"560"},{"desc":"561","fix":"562"},{"desc":"563","fix":"564"},{"desc":"565","fix":"566"},{"desc":"567","fix":"568"},{"desc":"569","fix":"570"},{"desc":"571","fix":"572"},{"desc":"573","fix":"574"},{"desc":"575","fix":"576"},{"desc":"577","fix":"578"},{"desc":"579","fix":"580"},{"desc":"579","fix":"581"},{"desc":"582","fix":"583"},{"desc":"579","fix":"584"},"Update the dependencies array to be: [location.pathname, options]",{"range":"585","text":"586"},"Update the dependencies array to be: [inputState, onSearch]",{"range":"587","text":"588"},"Update the dependencies array to be: [opts.items, setProps]",{"range":"589","text":"590"},"Update the dependencies array to be: [getTv]",{"range":"591","text":"592"},"Update the dependencies array to be: [getMovies]",{"range":"593","text":"594"},"Update the dependencies array to be: [getResults, query]",{"range":"595","text":"596"},"Update the dependencies array to be: [executeQuery, mounted, movieId, resxProps, setProps]",{"range":"597","text":"598"},"Update the dependencies array to be: [hide, mounted, resxProps, setProps]",{"range":"599","text":"600"},{"range":"601","text":"598"},{"range":"602","text":"600"},"Update the dependencies array to be: [containerRef, hideObjectsWithNoImage, items]",{"range":"603","text":"604"},"Update the dependencies array to be: [expandFull, showDetails, firstRun, resxProps, setProps]",{"range":"605","text":"606"},"Update the dependencies array to be: [itemWidth, items.length]",{"range":"607","text":"608"},"Update the dependencies array to be: [onSelect, title]",{"range":"609","text":"610"},"Update the dependencies array to be: [mounted, show]",{"range":"611","text":"612"},"Update the dependencies array to be: [togglePanel]",{"range":"613","text":"614"},"Update the dependencies array to be: [expandFull, resxProps, showDetails]",{"range":"615","text":"616"},"Update the dependencies array to be: [fetchMore, items, lazyConfig, mounted, page]",{"range":"617","text":"618"},"Update the dependencies array to be: [expandFull, items, mounted, page, resxProps, setLazyInputs, showDetails]",{"range":"619","text":"620"},"Update the dependencies array to be: [actvStartIdx, expandFull, items.length, mounted, movies, selectedIndex, setLazyInputs, showDetails, visibleColumns]",{"range":"621","text":"622"},"Update the dependencies array to be: [loadingState, mounted]",{"range":"623","text":"624"},"Update the dependencies array to be: [executeQuery, movieId]",{"range":"625","text":"626"},{"range":"627","text":"626"},"Update the dependencies array to be: [executeQuery]",{"range":"628","text":"629"},{"range":"630","text":"626"},[1456,1458],"[location.pathname, options]",[716,728],"[inputState, onSearch]",[1750,1752],"[opts.items, setProps]",[1223,1225],"[getTv]",[1185,1187],"[getMovies]",[1826,1833],"[getResults, query]",[1837,1846],"[executeQuery, mounted, movieId, resxProps, setProps]",[2038,2044],"[hide, mounted, resxProps, setProps]",[1834,1843],[2035,2041],[3225,3227],"[containerRef, hideObjectsWithNoImage, items]",[2391,2426],"[expandFull, showDetails, firstRun, resxProps, setProps]",[1311,1313],"[itemWidth, items.length]",[1100,1104],"[onSelect, title]",[1695,1701],"[mounted, show]",[1892,1894],"[togglePanel]",[2986,2988],"[expandFull, resxProps, showDetails]",[4131,4143],"[fetchMore, items, lazyConfig, mounted, page]",[5090,5097],"[expandFull, items, mounted, page, resxProps, setLazyInputs, showDetails]",[5997,6022],"[actvStartIdx, expandFull, items.length, mounted, movies, selectedIndex, setLazyInputs, showDetails, visibleColumns]",[6203,6217],"[loadingState, mounted]",[905,914],"[executeQuery, movieId]",[1723,1732],[1419,1421],"[executeQuery]",[2100,2109]]